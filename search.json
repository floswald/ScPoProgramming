[
  {
    "objectID": "01-shell-intro.html#intro",
    "href": "01-shell-intro.html#intro",
    "title": "The Unix Shell",
    "section": "Intro",
    "text": "Intro\n\n\n\n\n\n\nQuestion\n\n\n\nWhat is a command shell and why would I use one?\n\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\nExplain how the shell relates to the keyboard, the screen, the operating system, and users‚Äô programs.\nExplain when and why command-line interfaces should be used instead of graphical interfaces."
  },
  {
    "objectID": "01-shell-intro.html#do-you-gui",
    "href": "01-shell-intro.html#do-you-gui",
    "title": "The Unix Shell",
    "section": "Do You GUI?",
    "text": "Do You GUI?\n\n\n\n\n\n\nWhat‚Äôs a GUI\n\n\nA Graphical User Interface (GUI) lets the user interact by clicking with a mouse and using menus.\n\n\n\n\n\nI love üòç a good Graphical User Interface (GUI)\n\n\n\n\nBut. Bad things can happen.\n\n\n\n\n‚ò†Ô∏è"
  },
  {
    "objectID": "01-shell-intro.html#bad.",
    "href": "01-shell-intro.html#bad.",
    "title": "The Unix Shell",
    "section": "Bad.",
    "text": "Bad.\n\n\n\n\n\n\n\n\nNo More than 65,536 Rows\n\n\n\nPublic Health England missed 14.000 covid cases\nThey used .xls document to collect data.\n\n\n\n\n\n\n\n\n\n\n\nNo Growth with High Debt?\n\n\n\nReinhardt and Rogoff controversy.1\nInadvertently did not select all relevant countries on spreadsheet.\n\n\n\n\n\n\nBoth are eminent researchers and we do not imply misconduct."
  },
  {
    "objectID": "01-shell-intro.html#or-do-you-cli",
    "href": "01-shell-intro.html#or-do-you-cli",
    "title": "The Unix Shell",
    "section": "Or Do you CLI?",
    "text": "Or Do you CLI?\n\n\n\n\n\n\nWhat‚Äôs a CLI\n\n\nA Command Line Interface (CLI) allows interaction via (text) commands.\n\n\n\n\nCLIs can collect commands somewhere - reproducible\nBut one has to learn a language.\nThey are great for long, repetitive tasks.\nIt‚Äôs often the only way to interact with high-performance computing. ‚Äì> Show!"
  },
  {
    "objectID": "01-shell-intro.html#the-shell",
    "href": "01-shell-intro.html#the-shell",
    "title": "The Unix Shell",
    "section": "The Shell",
    "text": "The Shell\n\nThe shell is a program where we can type in commands and get output.\nWe often use very simple programs - good for just one thing.\nThere is tremendous power in combining those little programs.\nIt‚Äôs a platform approach to an Operating System.\n\n\n\n\n\n\n\nUnix is a Platform\n\n\nA protocol and many small program who interact according to the rules with each other\n\n\n\n\nlewing@isc.tamu.edu Larry Ewing and The GIMP, Attribution, via Wikimedia Commons"
  },
  {
    "objectID": "01-shell-intro.html#go",
    "href": "01-shell-intro.html#go",
    "title": "The Unix Shell",
    "section": "Go! üöÄ",
    "text": "Go! üöÄ\n\nOpen your terminal! (GitBash on Windows)\nYou should see something like\n\n$\nwhich is called the prompt.\n\nYou don‚Äôt have to type the $!\nnext to it, you see a cursor."
  },
  {
    "objectID": "01-shell-intro.html#first-command-ls",
    "href": "01-shell-intro.html#first-command-ls",
    "title": "The Unix Shell",
    "section": "First command: ls",
    "text": "First command: ls\n\ntype ls and hit enter\nyou see something like this as output:\n\nDesktop     Downloads   Movies      Pictures\nDocuments   Library     Music       Public\n\nBy default, the terminal opens in your home directory.\nls lists the content of that directory."
  },
  {
    "objectID": "01-shell-intro.html#first-error",
    "href": "01-shell-intro.html#first-error",
    "title": "The Unix Shell",
    "section": "First Error!",
    "text": "First Error!\n\n\n\n\n\n\nDanger\n\n\n\nIf you mistype a command, or look for a program that is not installed, you get an error. Like:\n\nbash-3.2$ ks\nbash: ks: command not found\n\n\n\n\nLook for a spelling mistake (it‚Äôs ls not ks)\nOr install the required program."
  },
  {
    "objectID": "01-shell-intro.html#nelles-pipeline-a-typical-problem",
    "href": "01-shell-intro.html#nelles-pipeline-a-typical-problem",
    "title": "The Unix Shell",
    "section": "Nelle‚Äôs Pipeline: A Typical Problem",
    "text": "Nelle‚Äôs Pipeline: A Typical Problem\n\nNelle Nemo is a marine biologist. üåä üê°\nJust sampled gelatinous marine life in the Great Pacific Garbage Patch.\nFrom 1520 samples she obtained measures of the relative abundance of 300 proteins.\nHer supervisor, Professor Jones, handed down to hear a program called goostats.sh.\ngoostats.sh needs to be run on each of the 1520 samples.\nPaper needs to be ready by the end of the month."
  },
  {
    "objectID": "01-shell-intro.html#battle-plan",
    "href": "01-shell-intro.html#battle-plan",
    "title": "The Unix Shell",
    "section": "Battle Plan",
    "text": "Battle Plan\n\nUsing a GUI to run goostats.sh, Nelle will have to use her mouse to select and open a file 1520 times.\nIf goostats.sh takes 30 secs to run, this will take more than 12 hours of Nelle‚Äôs active time.\nWith the help of the shell, Nelle could make her computer go through that list of files instead.\nBonus : she will have a working pipeline, that can be re-run each time need be."
  },
  {
    "objectID": "01-shell-intro.html#what-does-nelle-need",
    "href": "01-shell-intro.html#what-does-nelle-need",
    "title": "The Unix Shell",
    "section": "What Does Nelle Need",
    "text": "What Does Nelle Need\nNelle has needs to learn the following things:\n\nnavigate to a file/directory\ncreate a file/directory\ncheck the length of a file\nchain commands together\nretrieve a set of files\niterate over files\nrun a shell script containing her pipeline\n\nAnd we will be right next to her. üôÇ"
  },
  {
    "objectID": "01-shell-intro.html#section-2",
    "href": "01-shell-intro.html#section-2",
    "title": "The Unix Shell",
    "section": "",
    "text": "Key Points\n\n\n\nA shell is a program whose primary purpose is to read commands and run other programs.\nThis lesson uses Bash, the default shell in many implementations of Unix.\nPrograms can be run in Bash by entering commands at the command-line prompt.\nThe shell‚Äôs main advantages are its high action-to-keystroke ratio, its support for automating repetitive tasks, and its capacity to access networked machines.\nThe shell‚Äôs main disadvantages are its primarily textual nature and how cryptic its commands and operation can be.\n\n\n\n\n\n\n\nScPo Intro To Programming 2023"
  },
  {
    "objectID": "09-R-packages.html#r-and-packages",
    "href": "09-R-packages.html#r-and-packages",
    "title": "Building R Packages",
    "section": "R and Packages",
    "text": "R and Packages\n\n\n\n\n\n\n\n\nQuestions\n\n\n\nWhy write our own R package?\nHow to create an R package?\nWhat are unit tests?\n\n\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\nLearn the RStudio-powered package development workflow.\nCreate a package, and test it.\nPublish the package to github.\nPublish the package docs as a self-contained website."
  },
  {
    "objectID": "09-R-packages.html#r-and-packages-1",
    "href": "09-R-packages.html#r-and-packages-1",
    "title": "Building R Packages",
    "section": "R and Packages",
    "text": "R and Packages\n\nWe have been using R packages all the time.\nEach time we say library(xyz) we are using external code provided in the xyz package.\nYou can write your own packages.\n\n\n\n\n\n\n\n\nWhat‚Äôs the point of Packages?\n\n\n\nExtend R functionality.\nfor researchers: key tool to ensure reproducibilty of findings\nfor researchers: key tool to organize code in team work\n\n\n\n\n\nLet‚Äôs go through some material from the r-pkgs book!"
  },
  {
    "objectID": "09-R-packages.html#building-a-toy-package",
    "href": "09-R-packages.html#building-a-toy-package",
    "title": "Building R Packages",
    "section": "Building a Toy Package",
    "text": "Building a Toy Package\n\n\nRStudio for the win\n\nWe do this in RStudio\nwe use the devtools package\ncheck you have a recent version:\n\n\npackageVersion(\"devtools\")\n\n[1] '2.4.5'\n\n\n\nif not - reinstall.\n\n\nLet‚Äôs Do it!\n\nlibrary(devtools)\n\n# create a package `here`\ncreate_package(\"~/toypackage\")\n\nPackage: toypackage\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R (parsed):\n    * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID)\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.2\n\n\n\nYou see Rstudio jumps to that location"
  },
  {
    "objectID": "09-R-packages.html#adding-git",
    "href": "09-R-packages.html#adding-git",
    "title": "Building R Packages",
    "section": "Adding Git",
    "text": "Adding Git\n\nOf course we want to track our package with git.\nWe use functions from the usethis package. This is loaded by default when attaching the devtools package (use_git is part of usethis‚Ä¶)\n\n\nlibrary(devtools)\nuse_git()\n\n\nSay Yes to everything ‚úåÔ∏è"
  },
  {
    "objectID": "09-R-packages.html#adding-code",
    "href": "09-R-packages.html#adding-code",
    "title": "Building R Packages",
    "section": "Adding Code",
    "text": "Adding Code\n\nWe add R source code in the R/ folder.\nCreate as many .R files as you want.\nIt‚Äôs good practice to organize tests accompanying source files.\n\n\nuse_r(\"sayhello\")\n\n‚Ä¢ Edit 'R/sayhello.R'\n‚Ä¢ Call `use_test()` to create a matching test file\n\n\n\nWhat‚Äôs with that use_test() thing? ü§î Let‚Äôs worry about this later."
  },
  {
    "objectID": "09-R-packages.html#ok-butadding-code",
    "href": "09-R-packages.html#ok-butadding-code",
    "title": "Building R Packages",
    "section": "Ok, but‚Ä¶Adding Code??",
    "text": "Ok, but‚Ä¶Adding Code??\n\nLet‚Äôs add a function to the file R/sayhello.R:\n\n# Notice I'm using = instead of < - because \n# the font of those slides prints it weirdly\nhello = function(who){\n    paste(\"hello,\",who)\n}\n\nNow, if this were a simple R script, we could source the R/sayhello.R file into global space and try this out.\nWe don‚Äôt want to do that here though. ü§®\nInstead, we want to load the package, which contains our function.\ndo load_all():\n\nload_all()\n‚Ñπ Loading toypackage"
  },
  {
    "objectID": "09-R-packages.html#trying-out-code",
    "href": "09-R-packages.html#trying-out-code",
    "title": "Building R Packages",
    "section": "Trying out Code",
    "text": "Trying out Code\n\n\n\n\n\n\nload_all()\n\n\n\nThe load_all() function simulates the process of building, installing, and attaching the toypackage package.\nThis means that all the functions you included in the package will become visible in the global scope (in your console)\nThis is not in general the case: Later on we will fine-tune which functions are visible to the user, and which ones are not!\n\n\n\n\n\nCall the function with your name!\n\nhello(\"Peter\")\n[1] \"hello, Peter\"\n\nGreat!"
  },
  {
    "objectID": "09-R-packages.html#checking-the-package",
    "href": "09-R-packages.html#checking-the-package",
    "title": "Building R Packages",
    "section": "Checking the Package",
    "text": "Checking the Package\n\nR has a rigid set of rules for what a package needs to look like.\nWhat files should be where, their names and permissions, such that the structure is nicely uniform across all R packages.\nParticularly relevant for official packages on CRAN\nDo this here often:\n\ncheck()\n\nThis outputs a bunch of things:\n\nIt actually builds our package in a separate process - immune from our current workspace\nIt runs a battery of checks and returns a report:\n\n\n0 errors ‚úî | 1 warning ‚úñ | 1 note ‚úñ"
  },
  {
    "objectID": "09-R-packages.html#editing-description",
    "href": "09-R-packages.html#editing-description",
    "title": "Building R Packages",
    "section": "Editing DESCRIPTION",
    "text": "Editing DESCRIPTION\n\nOpen the DESCRIPTION file (or type Ctrl + . and start typing desc)\nFill in the obviously missing contents.\n\nAdding a LICENSE\n\nUse a license, any license (Jeff Atwood)\n\nLet‚Äôs\nuse_mit_license()"
  },
  {
    "objectID": "09-R-packages.html#documenting-with-roxygen",
    "href": "09-R-packages.html#documenting-with-roxygen",
    "title": "Building R Packages",
    "section": "Documenting with Roxygen",
    "text": "Documenting with Roxygen\n\nGo back to the hello function, place the cursor inside the function body, and do Code > Insert Roxygen Skeleton.\nYou‚Äôll see something like this:\n\n#' Title\n#'\n#' @param who \n#'\n#' @return\n#' @export\n#'\n#' @examples\nhello <- function(who){\n  paste(\"hello,\",who)\n}\n\nEach line starting with #' is part of the docstring.\nThe roxygen package can separate those blocks from our code, and produce valid R documentation for us! ü§Ø"
  },
  {
    "objectID": "09-R-packages.html#building-documentation",
    "href": "09-R-packages.html#building-documentation",
    "title": "Building R Packages",
    "section": "Building Documentation",
    "text": "Building Documentation\n\nLet‚Äôs modify the docstring accordingly.\nexecute the document() function.\nAfter that, the documentation is visible to us:\n\n?hello\n‚Ñπ Rendering development documentation for \"hello\"\n\nLook in the Help pane in RStudio!"
  },
  {
    "objectID": "09-R-packages.html#namespace",
    "href": "09-R-packages.html#namespace",
    "title": "Building R Packages",
    "section": "NAMESPACE",
    "text": "NAMESPACE\n\nDid you notice the @export tag in the docstring?\nwhen we ran document(), roxygen changed the NAMESPACE file based upon that tag.\nGo and look at that file!\nThe contents of NAMESPACE specify what is visible to a user who does library(toypackage).\nTry removing the @export tag, and document() again. Look back at NAMESPACE!\n\ncheck() again!\ncheck()\n0 errors ‚úî | 0 warnings ‚úî | 0 notes ‚úî"
  },
  {
    "objectID": "09-R-packages.html#time-to-install-the-package",
    "href": "09-R-packages.html#time-to-install-the-package",
    "title": "Building R Packages",
    "section": "Time to INSTALL the package",
    "text": "Time to INSTALL the package\n\nOk, great. Now we have a minimal package that works to a certain extent üôÇ.\nWe must install it into our package library, in order to be able to use it like any other package (same as when we did install.packages(\"ggplot2\"))\nNotice that R installs your packages here:\n\n\n.libPaths()\n\n[1] \"/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\"\n\n\n\nWe install our package into that location with install()\nLook out for the final message:\n\n* DONE (toypackage)\nüëè"
  },
  {
    "objectID": "09-R-packages.html#new-session---try-it-out",
    "href": "09-R-packages.html#new-session---try-it-out",
    "title": "Building R Packages",
    "section": "New Session - Try it Out!",
    "text": "New Session - Try it Out!\n\nRestart Rstudio\ntype into the console\n\nlibrary(toypackage)\n\nand then let‚Äôs see our cool üòé function:\n\nhello(\"John Spencer Blues Explosion\")\n[1] \"hello, John Spencer Blues Explosion\"\n\nWorks! Bingo! üéâ"
  },
  {
    "objectID": "09-R-packages.html#automatically-testing-our-code",
    "href": "09-R-packages.html#automatically-testing-our-code",
    "title": "Building R Packages",
    "section": "Automatically Testing Our Code",
    "text": "Automatically Testing Our Code\n\nWe verified ourselves that this works.\nWe had our own, informal, way to convince ourselves that it works.\nWe knew which steps we had to follow until we would conclude that ‚Äúyes, this works‚Äù.\n\n\n\n\n\n\n\n\n\n\nThe Time Factor\n\n\nIf you come back to this in 2 months time you probably\n\nwon‚Äôt remember all the steps you have taken (above)\nwon‚Äôt be able to reproduce what you tested today!\n\n\n\n\n\n\n\n\n\n\n\nThe Scale Factor\n\n\nAs your package grows, you will find it hard to come back to all components repeatedly, making sure they all still work as intended (now that they may depend on other parts of your code)"
  },
  {
    "objectID": "09-R-packages.html#enter-unit-testing",
    "href": "09-R-packages.html#enter-unit-testing",
    "title": "Building R Packages",
    "section": "Enter Unit Testing",
    "text": "Enter Unit Testing\n\nAutomatic Unit Testing or Continuous Integration (CI) is our best response to this.\nWe still have to design and write the tests, but we can offload the work to run the tasks repeatedly, and automatically, to a helpful infrastructure.\n\nlibrary(devtools)\nuse_testthat()\n\nthen\n\nuse_test(\"sayhello\")\n‚Ä¢ Modify 'tests/testthat/test-sayhello.R'"
  },
  {
    "objectID": "09-R-packages.html#writing-unit-tests",
    "href": "09-R-packages.html#writing-unit-tests",
    "title": "Building R Packages",
    "section": "Writing Unit Tests",
    "text": "Writing Unit Tests\n\nIdeally, each function in our R/ folder is covered by a corresponding test.\n\n\n\n\n\n\n\nWhat Is a Test?\n\n\nThe purpose of a test is to verify that some part of your code, a function in most cases, works as intended.\n\n\n\n\nModify 'tests/testthat/test-sayhello.R' like so\n\ntest_that(\"hello function works\", {\n  who = \"James T. Kirk\"\n  expect_equal(hello(who), paste(\"hello,\",who))\n})\n\nReady for üöÄ takeoff?"
  },
  {
    "objectID": "09-R-packages.html#running-all-unit-tests",
    "href": "09-R-packages.html#running-all-unit-tests",
    "title": "Building R Packages",
    "section": "Running all unit tests",
    "text": "Running all unit tests\n\nYou can run each test file separately to try it out (you must do library(testthat) first)\nIt‚Äôs better practice to test the entire package though:\n\n> test()\n‚Ñπ Testing toypackage\n\nAttaching package: ‚Äòtestthat‚Äô\n\nThe following object is masked from ‚Äòpackage:devtools‚Äô:\n\n    test_file\n\n‚úî | F W S  OK | Context\n‚úî |         1 | sayhello                                         \n\n‚ïê‚ïê Results ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n\nCelebrate! üéâ ü•≥ üéä"
  },
  {
    "objectID": "09-R-packages.html#using-other-packages",
    "href": "09-R-packages.html#using-other-packages",
    "title": "Building R Packages",
    "section": "Using other packages",
    "text": "Using other packages\n\nMost likely our package would depend some other package as well.\nLike we could choose the export some of our functions, we now may want to import some functions from elsewhere.\nSuppose we want to use the dplyr package:\n\n> use_package(\"dplyr\")\n‚úî Adding 'dplyr' to Imports field in DESCRIPTION\n‚Ä¢ Refer to functions with `dplyr::fun()`\n\nLet‚Äôs check the DESCRIPTION file to see what happened."
  },
  {
    "objectID": "09-R-packages.html#hook-it-up-to-github",
    "href": "09-R-packages.html#hook-it-up-to-github",
    "title": "Building R Packages",
    "section": "Hook it up to GitHub!",
    "text": "Hook it up to GitHub!\n\nIt‚Äôs fairly easy to publish our new package to a github repo.\nLet‚Äôs use_github()\n\nuse_github()\n\nanswer all the prompts and end up here!"
  },
  {
    "objectID": "09-R-packages.html#adding-a-readme-file",
    "href": "09-R-packages.html#adding-a-readme-file",
    "title": "Building R Packages",
    "section": "Adding a Readme file",
    "text": "Adding a Readme file\n\nWe know by now that readme files are very important on any git repo.\nLet‚Äôs add one here as well!\nthe usethis::use_readme_rmd() function is perfect for this:\n\nusethis::use_readme_rmd()\n\nIf we want to automatically run our tests on a remote server called github actions, we can call this function as well to set this up:\n\nuse_github_actions()\n\nlet‚Äôs re-build the package now. (look for rstudio button install in build tab)"
  },
  {
    "objectID": "09-R-packages.html#adding-a-vignette",
    "href": "09-R-packages.html#adding-a-vignette",
    "title": "Building R Packages",
    "section": "Adding a Vignette",
    "text": "Adding a Vignette\n\nVignette‚Äôs are a great feature of R packages. They are full text introductions of the package to a first time user.\nA tutorial for your package.\nThis is going to be much more verbose and spiked with example input and ouput than the standard documentation.\nOften it features the main use case of your package.\nThere is an entire chapter on r-pkgs dedicated to this!\n\nAdding the Vignette(s)\nusethis::use_vignette(\"vignette-toypackage-1\")"
  },
  {
    "objectID": "09-R-packages.html#deploy-package-documention-on-a-website",
    "href": "09-R-packages.html#deploy-package-documention-on-a-website",
    "title": "Building R Packages",
    "section": "Deploy package documention on a website",
    "text": "Deploy package documention on a website\n \n\nüö® Now we are entering the seriously cool zone of R package development üòé\nWouldn‚Äôt it be ü§© amazing if all of our package documentation, the content of our readme, and any explanatory articles we might have written as vignettes, were available on a (free to host!) website which is always up to date?"
  },
  {
    "objectID": "09-R-packages.html#you-bet-its-cool",
    "href": "09-R-packages.html#you-bet-its-cool",
    "title": "Building R Packages",
    "section": "You Bet It‚Äôs Cool üòé",
    "text": "You Bet It‚Äôs Cool üòé"
  },
  {
    "objectID": "09-R-packages.html#deploy-package-documention-on-a-website-3",
    "href": "09-R-packages.html#deploy-package-documention-on-a-website-3",
    "title": "Building R Packages",
    "section": "Deploy package documention on a website 3",
    "text": "Deploy package documention on a website 3\n\nReady?\n\n\nusethis::use_pkgdown()\n\npkgdown is a package for website and docs building.\n\n\n\n\nLet‚Äôs build that site!\n\npkdown::build_site()\n\n\n\nLet‚Äôs get gh-actions going\n\nusethis::use_pkgdown_github_pages()\n\ncommit everything and push to github!"
  },
  {
    "objectID": "09-R-packages.html#summary",
    "href": "09-R-packages.html#summary",
    "title": "Building R Packages",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\n\nKey Points\n\n\n\nRStudio greatly facilitates R package development.\nR packages contain code, data and documentation in highly structured fashion.\nWe are encouraged to run automated unit tests.\nIt is relatively straightforward to publish the package to github for collaboration.\nIt is equally straightforward to build and publish a full website with package documentation and vignettes, hosted for free on github.com.\n\n\n\n\n\n\n\nScPo Intro To Programming 2023"
  },
  {
    "objectID": "03-filework.html#intro",
    "href": "03-filework.html#intro",
    "title": "Working with Files and Directories",
    "section": "Intro",
    "text": "Intro\n\n\n\n\n\n\nQuestions\n\n\n\nHow can I create, copy, and delete files and directories?\nHow can I edit files?\n\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\nCreate a directory hierarchy that matches a given diagram.\nCreate files in that hierarchy using an editor or by copying and renaming existing files.\nDelete, copy and move specified files and/or directories."
  },
  {
    "objectID": "03-filework.html#creating-directories",
    "href": "03-filework.html#creating-directories",
    "title": "Working with Files and Directories",
    "section": "Creating Directories",
    "text": "Creating Directories\n\nLet‚Äôs create a directory thesis here:\n\n$ cd ~/shell-lesson-data/exercise-data/writing\n$ ls -F\nthis outputs:\nhaiku.txt  LittleWomen.txt\n\nUse mkdir to create:\n\n$ mkdir thesis\nused like this, thesis is created in the current directory. While with the -p flag we created nested subdirectories:\n$ mkdir -p ../project/data ../project/results"
  },
  {
    "objectID": "03-filework.html#good-file-names",
    "href": "03-filework.html#good-file-names",
    "title": "Working with Files and Directories",
    "section": "Good File Names",
    "text": "Good File Names\n\n\n\n\n\n\nBad File Names\n\n\n\nDon‚Äôt use spaces. north pacific gyre is not a good one. Use north-pacific-gyre instead.\nDon‚Äôt begin with -.\nStick with letters, numbers, ., -, and _"
  },
  {
    "objectID": "03-filework.html#creating-a-text-file",
    "href": "03-filework.html#creating-a-text-file",
    "title": "Working with Files and Directories",
    "section": "Creating a Text File",
    "text": "Creating a Text File\n\nLet‚Äôs go into the thesis directory and create a text file called draft.txt.\n\n$ cd thesis\n$ nano draft.txt\n\n\n\n\n\n\nTEXT Editor\n\n\nnano is a super simple editor, and you can use it only to edit text files (That‚Äôs normal for text editors üòâ). You will probably switch to a more powerful editor later on (I recommend VSCode), but nano is a good starting point. Notice that ^ key is the Ctrl key, so ^X means Ctrl + X."
  },
  {
    "objectID": "03-filework.html#filename-extensions",
    "href": "03-filework.html#filename-extensions",
    "title": "Working with Files and Directories",
    "section": "Filename Extensions",
    "text": "Filename Extensions\nTask\n\nGo to your home directory: cd\ncreate an empty file with the touch command:\n\n$ # this is a comment, by the way \n$ cd  # so, going home.\n$ touch new_doc.pdf  # creating an empty file.\n\nOpen your file browser and double click on new_doc.pdf. What is going to happen?"
  },
  {
    "objectID": "03-filework.html#moving-files-and-directories",
    "href": "03-filework.html#moving-files-and-directories",
    "title": "Working with Files and Directories",
    "section": "Moving Files and Directories",
    "text": "Moving Files and Directories\n\nLet‚Äôs go back to the writing directory\n\n$ cd ~/shell-lesson-data/exercise-data/writing\n\nLet‚Äôs rename draft.txt to quotes.txt with mv.\n\n$ mv thesis/draft.txt thesis/quotes.txt\n\nNow let‚Äôs actually move it into the current dir:\n\n$ mv thesis/quotes.txt .\n\nNotice: mv x y means x is gone afterwards!"
  },
  {
    "objectID": "03-filework.html#copying-files-and-directories",
    "href": "03-filework.html#copying-files-and-directories",
    "title": "Working with Files and Directories",
    "section": "Copying Files and Directories",
    "text": "Copying Files and Directories\n\ncp x y is similar to mv x y, but you keep x.\n\n$ cp quotes.txt thesis/quotations.txt\n$ ls quotes.txt thesis/quotations.txt\n\nthe -r option means recursively and copies entire folders:\n\n$ cp -r thesis thesis_backup\n$ ls thesis thesis_backup\n\nNotice that rm -r mydir will delete everything inside the mydir folder!"
  },
  {
    "objectID": "03-filework.html#using-wildcards",
    "href": "03-filework.html#using-wildcards",
    "title": "Working with Files and Directories",
    "section": "Using Wildcards",
    "text": "Using Wildcards\n\nthe * character is a wildcard, i.e it matches all characters:\n\n$ cd shell-lesson-data/exercise-data/\n$ ls proteins/p*\nproteins/pentane.pdb    proteins/propane.pdb"
  },
  {
    "objectID": "03-filework.html#reproducing-a-folder-structure",
    "href": "03-filework.html#reproducing-a-folder-structure",
    "title": "Working with Files and Directories",
    "section": "Reproducing a Folder Structure",
    "text": "Reproducing a Folder Structure\nSuppose we want to create the following structure on our computer:\n2016-05-20/\n‚îî‚îÄ‚îÄ data\n   ‚îú‚îÄ‚îÄ processed\n   ‚îî‚îÄ‚îÄ raw\n\n\n\n\n\n\nChallenge\n\n\nWhich sequence will achieve this result?\n1.\n$ mkdir 2016-05-20\n$ mkdir 2016-05-20/data\n$ mkdir 2016-05-20/data/processed\n$ mkdir 2016-05-20/data/raw\n2.\n$ mkdir 2016-05-20/data/raw\n$ mkdir 2016-05-20/data/processed\n3.\n$ mkdir -p 2016-05-20/data/raw\n$ mkdir -p 2016-05-20/data/processed"
  },
  {
    "objectID": "03-filework.html#nice-trick",
    "href": "03-filework.html#nice-trick",
    "title": "Working with Files and Directories",
    "section": "Nice Trick",
    "text": "Nice Trick\n\nOh by the way.\nIf you are on MacOS, try to this on the command line\n\n$ open .\n\nPretty handy!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ScPoProgramming",
    "section": "",
    "text": "This website is the home of the course Introduction to Programming taught to first year PhD students (M1) in the doctoral program of the department of economics at Sciences Po Paris.\nThis course assumes no prior programming experience.\nBelow you will find setup instructions and a syllabus.\nYou can obtain all material for this course from the associated github repository at link\n\n\n\n\nAfter this course, we want you to be able to participate or conduct your own research project in an efficient way. Research nowadays means data sciencey stuff in most cases, certainly in Economics.\nWe want you to have a basic understanding of how an operating system (in particular, your OS) works.\nWe want to be able to achieve a basic level of automation in repetitive tasks.\nWe want you to know what Version Control is and how to use it in a research project.\nWe will introduce some (hopefully) useful R programming.\n¬© Florian Oswald, 2023"
  },
  {
    "objectID": "index.html#windows-and-mac-specific-instructions",
    "href": "index.html#windows-and-mac-specific-instructions",
    "title": "ScPoProgramming",
    "section": "Windows and Mac Specific Instructions",
    "text": "Windows and Mac Specific Instructions\nThere are different instructions depending on whether you have a Mac or a Windows computer. Unix-based computers are similar to Macs in most respects.\n\nWindows\nWe need to install some things that make your windows computer a resemble a bit a Unix box. In particular, we want to be able to use the unix shell. Therefore, I want you to download and install\n\nGitForWindows\n\nSpecifics:\n\nDuring the installation process, choose all default settings.\nAt one point, you are offered a choice for a default editor being used for git. If you know vim already, why not (I use vim), otherwise I recommend nano, which is a simple to use editor that runs inside your command line - we want to avoid having to open an external window of a separate editor for our tasks (i.e.¬†don‚Äôt choose notepad and other standalone editors).\n\n\n\nMac\nYou should be all set. To make sure we have really everything we need, open Terminal.app (in Applications > Utilities or do Cmd + Space to get spotlight search and type terminal). Then paste this code and hit enter:\nxcode-select --install\nclick on install (don‚Äôt click on get Xcode)\n\n\nUnix\nSame, all set. Maybe open a terminal and type\ngit --version\nif that throws an error, install it with your package manager, e.g.\nsudo apt install git-all"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n\n¬© Florian Oswald, 2023"
  },
  {
    "objectID": "05-git.html#version-what",
    "href": "05-git.html#version-what",
    "title": "Version Control with Git",
    "section": "Version What?",
    "text": "Version What?\n\n\n\n\n\n\nQuestion\n\n\n\nWhat is Version Control and Why Should I Care?\n\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\nUnderstand the benefits of an automated version control system.\nUnderstand the basics of how automated version control systems work."
  },
  {
    "objectID": "05-git.html#final.doc",
    "href": "05-git.html#final.doc",
    "title": "Version Control with Git",
    "section": "Final.doc",
    "text": "Final.doc\n\n‚ÄúPiled Higher and Deeper‚Äù by Jorge Cham, http://www.phdcomics.com"
  },
  {
    "objectID": "05-git.html#undo",
    "href": "05-git.html#undo",
    "title": "Version Control with Git",
    "section": "Undo",
    "text": "Undo\n\nThe latest version is often best for text documents.\nHowever, sometimes our view of best evolves. Then, we want to undo.\nUndo means going back in history.\n\n\n\nMS Word etc have track changes features.\nOnce you accepted the proposed changes of a collaborator, can you go back?\nWhat about Dropbox-like solutions? (What is dropbox actually?)"
  },
  {
    "objectID": "05-git.html#which-version-20210611_draft.tex",
    "href": "05-git.html#which-version-20210611_draft.tex",
    "title": "Version Control with Git",
    "section": "Which Version: 20210611_draft.tex",
    "text": "Which Version: 20210611_draft.tex\n\n\n\nHey, fixed that thing last week.\nIn 20220629-paper.tex?\nErm. Yes. No.¬†I think 20211203-paper.tex - messed up the file name.\nOk, can you copy it into the latest version?\nSure. Damn, can‚Äôt find it anymore. I‚Äôll just write it again. All in my head. ü§Ø\n\n\n\n\n\n‚ÄúTrue Story‚Äù by Florian Oswald"
  },
  {
    "objectID": "05-git.html#which-version-2-why-is-the-sample-size-so-small-suddenly",
    "href": "05-git.html#which-version-2-why-is-the-sample-size-so-small-suddenly",
    "title": "Version Control with Git",
    "section": "Which Version 2: Why is the sample size so small suddenly?",
    "text": "Which Version 2: Why is the sample size so small suddenly?\n\n\n\nWe had 800 observations, now 733. Why?\nErm‚Ä¶üò± No clue!\nWell you must have changed the code.\nYes, I improved the code in several parts.\nWell you have to find out what happened.\nBut that was weeks ago - I don‚Äôt remember! üò¢\n\n\nHard Bugs\n\nThe hard bugs üêõ are the ones you see only after a while.\nSee result today, error was introduced long ago.\nYou can rewind dropbox 30 days. What if‚Ä¶ ?\nAlso, throw away 30 days of work?\nüò± üò± üò± üò±"
  },
  {
    "objectID": "05-git.html#setting-up-git",
    "href": "05-git.html#setting-up-git",
    "title": "Version Control with Git",
    "section": "Setting Up Git",
    "text": "Setting Up Git\n\nWe all installed git.\nLet‚Äôs setup our name\n\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"your@mail.com\"\n\nLine Endings on Windows:\n\ngit config --global core.autocrlf false"
  },
  {
    "objectID": "05-git.html#creating-a-git-repository",
    "href": "05-git.html#creating-a-git-repository",
    "title": "Version Control with Git",
    "section": "Creating a Git Repository",
    "text": "Creating a Git Repository\n\n\n\n\n\n\nQuestion\n\n\n\nWhere does Git store information?\n\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\nCreate a local repository\nDescribe purpose of .git directory"
  },
  {
    "objectID": "05-git.html#gas-prices-project",
    "href": "05-git.html#gas-prices-project",
    "title": "Version Control with Git",
    "section": "Gas Prices Project",
    "text": "Gas Prices Project\n\nLet‚Äôs create a project folder in our home to look at the gas prices from last week.\n\n$ cd    # going to home dir \n$ mkdir gasprices  # create directory\n$ cd gasprices \n$ git init\n\nNow the directory ~/gasprices is endowed with git version control.\nWhat does that look like?"
  },
  {
    "objectID": "05-git.html#where-is-git",
    "href": "05-git.html#where-is-git",
    "title": "Version Control with Git",
    "section": "Where is Git?",
    "text": "Where is Git?\n\nRemember hidden files and folders?\n\n$ ls -a \n./    ../   .git/\n\nGit for this repository resides in .git\n\n\n\n\n\n\n\nDanger Zone\n\n\n\nIf you delete that folder, the entire version control is GONE.\nBe very careful that you really want to do that."
  },
  {
    "objectID": "05-git.html#tracking-changes-with-git",
    "href": "05-git.html#tracking-changes-with-git",
    "title": "Version Control with Git",
    "section": "Tracking Changes with Git",
    "text": "Tracking Changes with Git\n\n\n\n\n\n\nQuestion\n\n\n\nHow do I record changes in Git?\nHow do I check the status of my version control repository?\nHow do I record notes about what changes I made and why?\n\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\nUnderstand the benefits of an automated version control system.\nUnderstand the basics of how automated version control systems work."
  },
  {
    "objectID": "05-git.html#adding-code-and-text",
    "href": "05-git.html#adding-code-and-text",
    "title": "Version Control with Git",
    "section": "Adding Code and Text",
    "text": "Adding Code and Text\n\n\n\n\n\n\nNote\n\n\n\nNotice: The code we produce is text.\nRemember what we learned about file endings.\n\n\n\n\n\nLet‚Äôs add a shell script where we add our pipeline from last week.\n\n\nrun to get the raw data again:\n\nwget https://www.data.gouv.fr/fr/datasets/r/64e02cff-9e53-4cb2-adfd-5fcc88b2dc09 -O ~/gasprices/carburants.csv"
  },
  {
    "objectID": "05-git.html#adding-code-and-text-1",
    "href": "05-git.html#adding-code-and-text-1",
    "title": "Version Control with Git",
    "section": "Adding Code and Text",
    "text": "Adding Code and Text\n\ncreate a script\n\nnano maketable.sh  # open nano\n# type this:\ncd ~/gasprices   # make sure we are in the right place\ncut -d ';' -f 5 carburants.csv | tr [:lower:] [:upper:] | sort | uniq -c | sort\n# save and exit \n\n(Does it work?)\n\nls .  # check the new file is there\n./maketable.sh   # run it!\n\n\nNo, it doesn‚Äôt. üòñ\n\nchmod +x ./maketable.sh  # add executable mode\nls -a\n./maketable.sh"
  },
  {
    "objectID": "05-git.html#viewing-changes",
    "href": "05-git.html#viewing-changes",
    "title": "Version Control with Git",
    "section": "Viewing Changes",
    "text": "Viewing Changes\n\nOk, now let‚Äôs see what git makes of our additions to this directory.\n\nfloswald@PTL11077 ~/gasprices (main)> git status\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        carburants.csv\n        maketable.sh\n\nIt is actually helpful not to use bash as a shell‚Ä¶\nCustomizing your shell is an extremely effective procrastination device.\nYou must know what shaving a Yak means before you walk out of my class."
  },
  {
    "objectID": "05-git.html#seeing-the-difference",
    "href": "05-git.html#seeing-the-difference",
    "title": "Version Control with Git",
    "section": "Seeing the Difference",
    "text": "Seeing the Difference\n\nthe command git diff shows you what changed between versions.\nlets see what it shows now:\n\n$ git diff\n\nIt shows nothing, i.e.¬†an empty diff, because there are no commits yet to compare with.\nOk, let‚Äôs change that."
  },
  {
    "objectID": "05-git.html#modify-add-commit-1",
    "href": "05-git.html#modify-add-commit-1",
    "title": "Version Control with Git",
    "section": "Modify-Add-Commit 1",
    "text": "Modify-Add-Commit 1\n\ngit reports about untracked files. We need to decide what to track.\n\n\nMove files to staging area:\n\ngit add maketable.sh \ngit status\n\nNotice that I did not want to track the csv file.\n\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n        new file:   maketable.sh\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        carburants.csv"
  },
  {
    "objectID": "05-git.html#modify-add-commit-2",
    "href": "05-git.html#modify-add-commit-2",
    "title": "Version Control with Git",
    "section": "Modify-Add-Commit 2",
    "text": "Modify-Add-Commit 2\n\nNow, let‚Äôs record what is in the staging area.\n\n$ git commit -m 'added the maketable script'\n\n[main (root-commit) 9956506] added the maketable script\n 1 file changed, 2 insertions(+)\n create mode 100644 maketable.sh\n\ncheck status:\n\n$ git status\n\nOn branch main\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        carburants.csv\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n‚ûú  gasprices git:(main) ‚úó"
  },
  {
    "objectID": "05-git.html#modify-add-commit-3",
    "href": "05-git.html#modify-add-commit-3",
    "title": "Version Control with Git",
    "section": "Modify-Add-Commit 3",
    "text": "Modify-Add-Commit 3\n\nLet‚Äôs check what‚Äôs in the log.\n\n$ git log \n\ncommit 9956506dc3159403b87aea3b04654c293e82c680 (HEAD -> main)\nAuthor: Florian Oswald <florian.oswald@gmail.com>\nDate:   Tue Feb 7 10:50:51 2023 +0100\n\n    added the maketable script"
  },
  {
    "objectID": "05-git.html#modify-add-commit-4",
    "href": "05-git.html#modify-add-commit-4",
    "title": "Version Control with Git",
    "section": "Modify-Add-Commit 4",
    "text": "Modify-Add-Commit 4\n\nNow let‚Äôs modify the script finally.\n\n$ nano maketable.sh\n\n# add this line on top \necho hello user, will make a contigency table now.\n# save and exit\n\nnow - what‚Äôs the difference in the repo?"
  },
  {
    "objectID": "05-git.html#diffing",
    "href": "05-git.html#diffing",
    "title": "Version Control with Git",
    "section": "Diffing",
    "text": "Diffing\n\nthere are still the same files here:\n\n$ ls \ncarburants.csv  maketable.sh\n\nBut we can now compare versions:\n\n$ git diff \n\ndiff --git a/maketable.sh b/maketable.sh\nindex 7e01058..3b7007e 100644\n--- a/maketable.sh\n+++ b/maketable.sh\n@@ -1,2 +1,3 @@\n+echo hello user, will make a contigency table now.\n cd ~/gasprices   # make sure we are in the right place\n cut -d ';' -f 5 carburants.csv | tr [:lower:] [:upper:] | sort | uniq -c | sort"
  },
  {
    "objectID": "05-git.html#commiting-changes-again",
    "href": "05-git.html#commiting-changes-again",
    "title": "Version Control with Git",
    "section": "Commiting Changes Again",
    "text": "Commiting Changes Again\n\nlet‚Äôs first check everything runs\n\n$ ./maketable.sh\n\ngood. commit!\n\n$ git add maketable.sh \n$ git commit -m 'added message to user'"
  },
  {
    "objectID": "05-git.html#adding-a-readme",
    "href": "05-git.html#adding-a-readme",
    "title": "Version Control with Git",
    "section": "Adding a README",
    "text": "Adding a README\n\nGood. Now let‚Äôs add a README file.\nIt‚Äôs customary to write this in markdown\n\n$ nano README.md \nwrite this in nano and save when done.\n# Gas Prices\n\nThis repo contains code to analyse gas prices at French gas stations.\n\nadd to staging area, so we can take a snapshot\n\n$ git add README.md \n$ git commit -m 'added readme'"
  },
  {
    "objectID": "05-git.html#what-is-this-staging-area",
    "href": "05-git.html#what-is-this-staging-area",
    "title": "Version Control with Git",
    "section": "What is this Staging Area",
    "text": "What is this Staging Area\n\ngit is like a foto camera.\nbefore you take a picture of your friends, you need to arrange them somehow, so that all fit, and all üòÅ.\nYou put them on stage. Same for files in your repo.\n\n\nfigure from software carpentry"
  },
  {
    "objectID": "05-git.html#looking-at-history",
    "href": "05-git.html#looking-at-history",
    "title": "Version Control with Git",
    "section": "Looking at History",
    "text": "Looking at History\n\n\n\n\n\n\nQuestion\n\n\n\nHow can I identify old versions of files?\nHow do I review my changes?\nHow can I recover old versions of files?\n\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\nExplain what the HEAD of a repository is and how to use it.\nIdentify and use Git commit numbers.\nCompare various versions of tracked files.\nRestore old versions of files."
  },
  {
    "objectID": "05-git.html#the-most-recent-version-head",
    "href": "05-git.html#the-most-recent-version-head",
    "title": "Version Control with Git",
    "section": "The most recent version: HEAD",
    "text": "The most recent version: HEAD\n\nLet‚Äôs change the maketable.sh script again:\n\n$ nano maketable.sh\necho program run successfully\n# save exit\n\n$ git add maketable.sh \n\nThe most recent version of our repo is called HEAD.\n\n$ git diff # compares entire repo to HEAD \n$ git diff HEAD maketable.sh"
  },
  {
    "objectID": "05-git.html#whoops-typo",
    "href": "05-git.html#whoops-typo",
    "title": "Version Control with Git",
    "section": "Whoops, typo",
    "text": "Whoops, typo\n\nOh no, we wrote program run successfully. That should be ran not run.\nWhat now?\n\n\n\nwe have not committed this yet!\nwe can just get back the version in HEAD, and edit again:\n\n$ git restore maketable.sh\n$ git checkout maketable.sh # also works\n\nedit the script, add and commit."
  },
  {
    "objectID": "05-git.html#how-to-get-a-specific-version",
    "href": "05-git.html#how-to-get-a-specific-version",
    "title": "Version Control with Git",
    "section": "How to get a specific version",
    "text": "How to get a specific version\n\nWhat if you want something else than HEAD?\nlike, the first version of maketable.sh?\nlook at history:\n\n$ git log --oneline --graph\n\n* a6f023b (HEAD -> main) added readme\n* 9956506 added the maketable script\n\nThe 9956506 is the unique identifier of that version.\nWe can go back to that version:\n\n$ git checkout 9956506 maketable.sh"
  },
  {
    "objectID": "05-git.html#so-how-does-this-thing-work",
    "href": "05-git.html#so-how-does-this-thing-work",
    "title": "Version Control with Git",
    "section": "So, how does this thing work?",
    "text": "So, how does this thing work?\n\nsoftware carpentry image."
  },
  {
    "objectID": "05-git.html#version-control-with-vscode",
    "href": "05-git.html#version-control-with-vscode",
    "title": "Version Control with Git",
    "section": "Version Control with VScode",
    "text": "Version Control with VScode\n\nDownload Visual Studio Code\nStart\nOpen folder ~/gasprices\ncheck version control tab on the left."
  },
  {
    "objectID": "05-git.html#version-control-with-rstudio",
    "href": "05-git.html#version-control-with-rstudio",
    "title": "Version Control with Git",
    "section": "Version Control with RStudio",
    "text": "Version Control with RStudio\n\ntop right click on new project\nSelect existing directory\nSelect ~/gasprices\ncheckout out the git tab in Rstudio!"
  },
  {
    "objectID": "05-git.html#collaborating-with-git-on-github",
    "href": "05-git.html#collaborating-with-git-on-github",
    "title": "Version Control with Git",
    "section": "Collaborating with Git on GitHub",
    "text": "Collaborating with Git on GitHub\n\nCreate repo\ncopy ssh remote URL\nconnect local to remote repo"
  },
  {
    "objectID": "05-git.html#ssh-connections",
    "href": "05-git.html#ssh-connections",
    "title": "Version Control with Git",
    "section": "SSH connections",
    "text": "SSH connections\n\nSecure Shell Protocol\nPrivate-Public key pair. It‚Äôs like a lock, and you have the only key.\nLet‚Äôs check if you have one already!\n\nls -la ~/.ssh \nif error, create one:\nssh-keygen -t ed25519 -C \"your@email.com\"\npress enter (no passphrase)\ncheck\nls -la ~/.ssh"
  },
  {
    "objectID": "05-git.html#communicate-with-github-remote",
    "href": "05-git.html#communicate-with-github-remote",
    "title": "Version Control with Git",
    "section": "Communicate with GitHub Remote",
    "text": "Communicate with GitHub Remote\n\nLet‚Äôs ping the remote server at GitHub now.\n\nssh -T git@github.com\n\nright, of course Github doesn‚Äôt have our public key yet (the lock for our key!)\ncopy from your terminal\n\ncat ~/.ssh/id_ed25519.pub  # or your *.pub \n\nGo to github.com, click top right corner, settings, SSH keys."
  },
  {
    "objectID": "05-git.html#adding-a-remote-to-your-local-repo",
    "href": "05-git.html#adding-a-remote-to-your-local-repo",
    "title": "Version Control with Git",
    "section": "Adding a Remote to your local Repo",
    "text": "Adding a Remote to your local Repo\n\nNow that we can talk to Github.com, let‚Äôs add the remote to our local repo.\nWe add a remote by getting the SSH url from the repository (green button) online.\n\n$ git remote add origin git@github.com:YOUR_USER/YOUR_REPO.git\n\norigin is the name of the remote server. your choice, but origin is common.\nthis should set that remote both for sending and retrieving stuff from the repo. pull and push, in git language:\n\n$ git remote --v"
  },
  {
    "objectID": "05-git.html#pushing-it",
    "href": "05-git.html#pushing-it",
    "title": "Version Control with Git",
    "section": "Pushing It",
    "text": "Pushing It\n\nNow we can push our local repository to the remote repo.\nThere will be a full copy of what is in .git (i.e., the entire history of the repo) on that remote machine.\nYou will be able to use it like a central backup location for your work.\n\n$ git push -u origin main\n\nthe -u flag sets the main branch as default upstream branch to track."
  },
  {
    "objectID": "05-git.html#branching-it",
    "href": "05-git.html#branching-it",
    "title": "Version Control with Git",
    "section": "Branching It",
    "text": "Branching It\n\nNext to different versions of a file/directory over time, we can have versions evolving in parallel.\nImagine development history branching off into 2 separate directions at one point.\nThey may converge at some point again, but maybe one of them will turn out a failure and we drop it.\nBranches are hugely useful to organize team work.\n\n$ git checkout -b testing # checkout repo on new branch `testing`\nSwitched to a new branch 'testing'\n\nNow can develop stuff on the testing branch.\nLater on, we can merge it back into main if we like it."
  },
  {
    "objectID": "05-git.html#the-full-pictures",
    "href": "05-git.html#the-full-pictures",
    "title": "Version Control with Git",
    "section": "The Full Picture(s)",
    "text": "The Full Picture(s)\n\npicture from @MarkLodato - click for more!"
  },
  {
    "objectID": "05-git.html#pushing-branches-to-github",
    "href": "05-git.html#pushing-branches-to-github",
    "title": "Version Control with Git",
    "section": "Pushing Branches to GitHub",
    "text": "Pushing Branches to GitHub\n\nOnce you created a local branch you can of course copy (push) it to your remote to share with others.\nyou would amend the push command:\n\n# make sure you are on the desired branch \n$ git branch \n  main\n* testing\n\n$ git push origin testing\n\n\n\nScPo Intro To Programming 2023"
  },
  {
    "objectID": "10-spatial-R.html#intro",
    "href": "10-spatial-R.html#intro",
    "title": "Spatial Data With R",
    "section": "Intro",
    "text": "Intro\nIn this lecture we will cover some basics about geospatial data and how to handle it with R. Spatial data is getting always more important, so we need a powerful tool to work with it.\n\n\n\n\n\n\ntl;dr\n\n\nYes, R is a fully fledged GIS. No, you don‚Äôt need an ArchGIS (or other) license to do real work with spatial data (I don‚Äôt have one, and I use it for real work üòâ).\n\n\n\n\nResources\n\nGeocomputation with R is our main reference.\nThe sf package vignettes are outstanding."
  },
  {
    "objectID": "10-spatial-R.html#spatial-data-basics",
    "href": "10-spatial-R.html#spatial-data-basics",
    "title": "Spatial Data With R",
    "section": "Spatial Data Basics",
    "text": "Spatial Data Basics\n\nOne prime example of spatial data are of course maps, providing an answer to the age-old question where is what.\nFundamentally, spatial data still provide an answer to the same question, it is just that the what part has gotten much richer over the years.\nThe attribute location may be only one of many other features of information on a certain observation.\nMultiple measurements imply that observations can be observed moving in space.\nThere are two fundamentally different ways in which to consider spatial data:"
  },
  {
    "objectID": "10-spatial-R.html#spatial-data-types",
    "href": "10-spatial-R.html#spatial-data-types",
    "title": "Spatial Data With R",
    "section": "Spatial Data Types",
    "text": "Spatial Data Types\n\n\n\n\n\n\n\n\n1. Vector Data\n\n\nWe represent things with points, lines and polygons. We can scale and stretch and transform those easily with mathematical operations. Can increase precision to arbitrary levels (can always zoom in futher).\n\n\n\n\n\n\n\n\n\n\n\n2. Raster Data\n\n\nWe have fixed-size tiles or cells (like a mosaic, or like pixels), which form a grid. Fixed resolution.\n\n\n\n\n\n\nüëâ This lecture deals only with Vector Data."
  },
  {
    "objectID": "10-spatial-R.html#representation-of-vector-data",
    "href": "10-spatial-R.html#representation-of-vector-data",
    "title": "Spatial Data With R",
    "section": "Representation of Vector Data",
    "text": "Representation of Vector Data\n\n\nBasically, we concentrate on a 2-dimensional space, even though three-dimensional spaces can be useful as well (any ideas for examples?)\n\n\n\n\nIn other words, we denote a location with a tuple of coordinates \\((x,y)\\), or \\((x,y,z)\\) as the case may be, where each coordinate gives the distance from the origin in each direction. For example, we could represent Paris by the tuple c(2.34,48.85)\n\n\n\n\nOne key question in the context of spatial data concerning planet earth you should ask is: Where is the Origin?\n\n\n\n\nAnother question is, related to the well known fact that the earth is quasi-elipsoid (i.e.¬†a bit like a squashed football and - just to be sure: not flat), how to represent locations in three dimensions on a 2-dimensional map?"
  },
  {
    "objectID": "10-spatial-R.html#coordinate-reference-systems-crs",
    "href": "10-spatial-R.html#coordinate-reference-systems-crs",
    "title": "Spatial Data With R",
    "section": "Coordinate Reference Systems (CRS)",
    "text": "Coordinate Reference Systems (CRS)\n\n\nCRSs use longitude and latitude to identify locations.\n\n\n\n\nOne widely used CRS is the World Geodetic System 1984, or WGS84 (used on google maps). It measures angular distance in degrees in a geocentric datum (made for the entire planet).\n\n\n\n\nlongitude measures East-West distance from the Prime Meridian Plane. (left-to-right distance from a starting point)\n\n\n\n\nlatitude measures North-South distance of Equatorial Plane. (up-down distance from a starting point)"
  },
  {
    "objectID": "10-spatial-R.html#one-standard-crs-wgs84",
    "href": "10-spatial-R.html#one-standard-crs-wgs84",
    "title": "Spatial Data With R",
    "section": "One Standard CRS: WGS84",
    "text": "One Standard CRS: WGS84\n\n\n\n\n\n\nThe dashed lines are the WGS84 elipsoid coordinate frame\nThe blue circle is the origin at \\((0,0)\\) :\n\n0 degrees longitude (x-direction): Prime Meridian through Greenwhich, London.\n0 degrees latitude (y-direction): Equator."
  },
  {
    "objectID": "10-spatial-R.html#paris-in-different-crs",
    "href": "10-spatial-R.html#paris-in-different-crs",
    "title": "Spatial Data With R",
    "section": "Paris in Different CRS",
    "text": "Paris in Different CRS\n\n\n\n\n\nParis at c(2.34,48.85) in WGS64\n\n\n\n\n\n\n\nParis at c(600256.4, 127726.4) in NTF Lambert North France"
  },
  {
    "objectID": "10-spatial-R.html#paris-where",
    "href": "10-spatial-R.html#paris-where",
    "title": "Spatial Data With R",
    "section": "Paris Where?",
    "text": "Paris Where?\n\n\n\n\n\nParis at c(600256.4, 127726.4) in NTF Lambert North France\n\n\n\n\n  \nTask\n\nSearch for NTF Lambert North France\nWhat does c(600256.4, 127726.4) actually mean?"
  },
  {
    "objectID": "10-spatial-R.html#geocentric-vs-local-datum",
    "href": "10-spatial-R.html#geocentric-vs-local-datum",
    "title": "Spatial Data With R",
    "section": "Geocentric vs Local Datum",
    "text": "Geocentric vs Local Datum\n\nFigure from Geocomputation with R. Geocentric and local geodetic datums shown on top of a geoid (in false color and the vertical exaggeration by 10,000 scale factor). Image of the geoid is adapted from the work of Ince et al.¬†(2019)"
  },
  {
    "objectID": "10-spatial-R.html#working-with-vector-spatial-data-in-r",
    "href": "10-spatial-R.html#working-with-vector-spatial-data-in-r",
    "title": "Spatial Data With R",
    "section": "Working with (Vector) Spatial Data in R",
    "text": "Working with (Vector) Spatial Data in R\n\nWe rely on a few core libraries.\nsf being the main one. That itself relies on several other lower level libraries.\n\ninstall.packages(\"sf\")\n\nDon‚Äôt try to build from source unless you know why.\nFor problems, please consult the package readme.\nLet‚Äôs try to load the library:\n\n\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\n\n\nI highly recommend the package vignettes!\n\nvignette(package = \"sf\") # see which vignettes are available\nvignette(\"sf1\")          # an introduction to the package"
  },
  {
    "objectID": "10-spatial-R.html#working-with-sf-1",
    "href": "10-spatial-R.html#working-with-sf-1",
    "title": "Spatial Data With R",
    "section": "Working with sf 1",
    "text": "Working with sf 1\nLet‚Äôs read a shapefile from the sf package:\n\nnc = st_read(system.file(\"shape/nc.shp\", package=\"sf\"))\n\nReading layer `nc' from data source \n  `/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library/sf/shape/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n\nhead(nc[,c(\"AREA\",\"NAME\",\"FIPS\",\"BIR79\")])\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -81.74107 ymin: 36.07282 xmax: -75.77316 ymax: 36.58965\nGeodetic CRS:  NAD27\n   AREA        NAME  FIPS BIR79                       geometry\n1 0.114        Ashe 37009  1364 MULTIPOLYGON (((-81.47276 3...\n2 0.061   Alleghany 37005   542 MULTIPOLYGON (((-81.23989 3...\n3 0.143       Surry 37171  3616 MULTIPOLYGON (((-80.45634 3...\n4 0.070   Currituck 37053   830 MULTIPOLYGON (((-76.00897 3...\n5 0.153 Northampton 37131  1606 MULTIPOLYGON (((-77.21767 3...\n6 0.097    Hertford 37091  1838 MULTIPOLYGON (((-76.74506 3..."
  },
  {
    "objectID": "10-spatial-R.html#working-with-sf-2",
    "href": "10-spatial-R.html#working-with-sf-2",
    "title": "Spatial Data With R",
    "section": "Working with sf 2",
    "text": "Working with sf 2\n\nNotice the geometry column.\nThis is basically a geo-referenced data.frame.\n\n\nplot(nc[,\"AREA\"])  # plot feature \"AREA\" (i.e. column 1)"
  },
  {
    "objectID": "10-spatial-R.html#working-with-sf-3",
    "href": "10-spatial-R.html#working-with-sf-3",
    "title": "Spatial Data With R",
    "section": "Working with sf 3",
    "text": "Working with sf 3\n\nWorks also with ggplot2\n\n\nlibrary(ggplot2)\nggplot(nc) + geom_sf(aes(fill = AREA)) +\n    scale_fill_viridis_c(name = \"Area\")"
  },
  {
    "objectID": "10-spatial-R.html#working-with-sf-4-crs-transform",
    "href": "10-spatial-R.html#working-with-sf-4-crs-transform",
    "title": "Spatial Data With R",
    "section": "Working with sf 4: CRS Transform",
    "text": "Working with sf 4: CRS Transform\n\n\n\n\nggplot(nc) + geom_sf(aes(fill = AREA)) +\n    scale_fill_viridis_c(name = \"Area\")\n\n\n\n\n\n\n\nnc %>% \n    st_transform(\"+proj=moll\") %>%\n    ggplot() + geom_sf(aes(fill = AREA)) +\n        scale_fill_viridis_c(name = \"Area\") + \n        ggtitle(\"Mollweide Projection\")"
  },
  {
    "objectID": "10-spatial-R.html#geometric-operations-with-sf-1",
    "href": "10-spatial-R.html#geometric-operations-with-sf-1",
    "title": "Spatial Data With R",
    "section": "Geometric Operations with sf 1",
    "text": "Geometric Operations with sf 1\n\nthe simple features standard specifies a series of operations.\nthe relevant functions start with st_ (for spatio-temporal)\nFor 2 geometries x,y we can compute things like st_distance(x,y), st_intersect(x,y), etc\nFor single geometries we can do things like st_area(x), st_union(x), st_buffer(x,dist) etc\n\n\nst_area(st_union(nc))\n\n127025870730 [m^2]\n\n\n\nOoof, how many square km is that now? ü§î\n\n\n\nst_area(st_union(nc)) %>% units::set_units(km2)\n\n127025.9 [km2]"
  },
  {
    "objectID": "10-spatial-R.html#geometric-operations-with-sf-2",
    "href": "10-spatial-R.html#geometric-operations-with-sf-2",
    "title": "Spatial Data With R",
    "section": "Geometric Operations with sf 2",
    "text": "Geometric Operations with sf 2\n\n# copied from https://github.com/uo-ec607/lectures\nnc_centroid = st_centroid(nc)\n\nggplot(nc) +\n  geom_sf(fill = \"black\", alpha = 0.8, col = \"white\") +\n  geom_sf(data = nc_centroid, col = \"red\") + ## Notice how easy it is to combine different sf objects\n  labs(\n    title = \"Counties of North Carolina\",\n    subtitle = \"Centroids in red\"\n    )"
  },
  {
    "objectID": "10-spatial-R.html#mapping-the-seine-1",
    "href": "10-spatial-R.html#mapping-the-seine-1",
    "title": "Spatial Data With R",
    "section": "Mapping the Seine 1",
    "text": "Mapping the Seine 1\n\n\n\n# copied from https://github.com/uo-ec607/lectures\n# install.packages(c(\"maps\",\"spData\"))\n## Get the data\nfrance = st_as_sf( \n    maps::map('france', \n            plot = FALSE, \n            fill = TRUE)\n            )\ndata(\"seine\", \n    package = \"spData\")\n\n## Make sure they have the same projection\nseine = st_transform(seine, \n        crs = st_crs(france))\n\n\n# now, make a base plot:\npseine = ggplot() + \n  geom_sf(data = france, \n          alpha = 0.8, \n          fill = \"black\", \n          col = \"gray50\") + \n  labs(\n    title = \"Administrative regions of France\"\n    )\nggsave(plot = pseine, \n    \"images/seine.png\", \n    width=6, height=6)"
  },
  {
    "objectID": "10-spatial-R.html#mapping-the-seine-2",
    "href": "10-spatial-R.html#mapping-the-seine-2",
    "title": "Spatial Data With R",
    "section": "Mapping the Seine 2",
    "text": "Mapping the Seine 2\n\n\n\n# let's add the seine!\npseine2 = pseine +\n    geom_sf(data = seine, col = \"#05E9FF\", lwd = 1) + \n    labs(\n    title = \"Administrative regions of France\",\n    subtitle = \"Also showing the Seine, Marne and Yonne rivers\"\n    )\nggsave(plot = pseine2, \n    \"images/seine2.png\", \n    width=6, height=6)"
  },
  {
    "objectID": "10-spatial-R.html#intersect-two-sf-objects",
    "href": "10-spatial-R.html#intersect-two-sf-objects",
    "title": "Spatial Data With R",
    "section": "Intersect two sf objects",
    "text": "Intersect two sf objects\n\n\n\nseine = st_transform(seine, crs = st_crs(france))\nsf_use_s2(FALSE)  # need to turn off because of invalid geometry\nfrance_intersected = st_intersection(france, seine)\nhead(france_intersected,2)\n\nSimple feature collection with 2 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 3.254238 ymin: 48.63712 xmax: 4.872966 ymax: 49.09028\nGeodetic CRS:  WGS 84\n      ID  name                           geom\n6  Aisne Marne LINESTRING (3.608053 49.089...\n14 Marne Marne LINESTRING (4.872966 48.637...\n\n\n\npl3 = france_intersected %>%\n  ggplot() + \n  geom_sf(alpha = 0.8, aes(fill = ID, col = ID)) + \n  labs(\n    title = \"Seine, Marne and Yonne rivers\",\n    caption = \"Colours depict French administrative regions\"\n    ) +\n  theme(legend.title = element_blank())\nggsave(plot = pl3,\"images/seine3.png\", \n    width=7, height=5)"
  },
  {
    "objectID": "10-spatial-R.html#join-two-sf-objects",
    "href": "10-spatial-R.html#join-two-sf-objects",
    "title": "Spatial Data With R",
    "section": "Join two sf objects",
    "text": "Join two sf objects\n\n\n\npl4 = st_join(france, seine) %>% \n  ## Get rid of regions with no overlap\n  dplyr::filter(!is.na(name)) %>% \n  ## Some regions are duplicated b/c two \n  ## branches of the river network flow through them \n  dplyr::distinct(ID, .keep_all = T) %>% \n  ## pipe into ggplot\n  ggplot() + \n  geom_sf(alpha = 0.5, \n          fill = \"#01731f\",\n          col = \"#fcb4b3\",  # of borders\n          linewidth = 0.5) + # of borders\n  geom_sf(data = seine, col = \"#05E9FF\", lwd = 1) + \n  labs(title = \"Intersected regions only\") +\n  theme_bw()\nggsave(plot = pl4,\"images/seine4.png\", \n    width=7, height=5)"
  },
  {
    "objectID": "10-spatial-R.html#joining-task",
    "href": "10-spatial-R.html#joining-task",
    "title": "Spatial Data With R",
    "section": "Joining Task",
    "text": "Joining Task\n\n\n\nModify the code chunk on the previous slide.\nWe want to have different colors for the shown departements, instead of all ‚Äú#01731f‚Äù.\nI.e. make this for me üëâ"
  },
  {
    "objectID": "10-spatial-R.html#joining-task-solution",
    "href": "10-spatial-R.html#joining-task-solution",
    "title": "Spatial Data With R",
    "section": "Joining Task Solution",
    "text": "Joining Task Solution\n\nd5 = st_join(france, seine) %>% \n  ## Get rid of regions with no overlap\n  dplyr::filter(!is.na(name)) %>% \n  ## Some regions are duplicated b/c two \n  ## branches of the river network flow through them \n  dplyr::distinct(ID, .keep_all = T)\n\nmy_colors = palette.colors(nrow(d5), palette = \"Alphabet\")\nnames(my_colors) <- NULL\n\n  ## pipe into ggplot\npl5 = ggplot(data = d5) + \n  geom_sf(aes(fill = ID),\n          col = \"#fcb4b3\",  # of borders\n          linewidth = 0.5) + # of borders\n  geom_sf(data = seine, col = \"#05E9FF\", lwd = 1.5) + \n  labs(title = \"Intersected regions only\", fill = \"Departement\") +\n  theme_bw() +\n  scale_fill_manual(values = my_colors)\nggsave(plot = pl5,\"images/seine5.png\", \n    width=7, height=5)"
  },
  {
    "objectID": "10-spatial-R.html#distances",
    "href": "10-spatial-R.html#distances",
    "title": "Spatial Data With R",
    "section": "Distances",
    "text": "Distances\n\nAnother typical question could be:\n\n\nWhat‚Äôs the distance between 2 points?"
  },
  {
    "objectID": "10-spatial-R.html#other-resources",
    "href": "10-spatial-R.html#other-resources",
    "title": "Spatial Data With R",
    "section": "Other Resources",
    "text": "Other Resources\n\nmapview/ : great for interactive and quick mapping\ntmaps: same"
  },
  {
    "objectID": "04-pipes.html#combining-commands",
    "href": "04-pipes.html#combining-commands",
    "title": "Pipes and Filters",
    "section": "Combining Commands",
    "text": "Combining Commands\n\nWe are now ready to combine some of the commands we learned.\nYou will see that here is where the real power lies.\nLet‚Äôs navigate into our exercise data folder first.\n\n$ cd ~/shell-lesson-data/exercise-data/proteins\n$ ls\ncubane.pdb   ethane.pdb   methane.pdb  octane.pdb   pentane.pdb  propane.pdb\n\nThose are protein data bank files."
  },
  {
    "objectID": "04-pipes.html#capturing-output",
    "href": "04-pipes.html#capturing-output",
    "title": "Pipes and Filters",
    "section": "Capturing Output",
    "text": "Capturing Output\n\nIntroducing the wc word count command.\n\nwc cubane.pdb\n20     156    1158 cubane.pdb\n29 lines, 156 words, 1158 characters.\n\nLet‚Äôs redirect the output of wc to a file instead with >:\n\nwc -l *.pdb > lengths.txt\n\nno ouput on screen, you see? but now there is a new file: lengths.txt.\nLet‚Äôs concatenate its content (i.e.¬†join together) and print to screen:\n\n$ cat lengths.txt \n      20 cubane.pdb\n      12 ethane.pdb\n       9 methane.pdb\n      30 octane.pdb\n      21 pentane.pdb\n      15 propane.pdb\n     107 total"
  },
  {
    "objectID": "04-pipes.html#reading-text-files",
    "href": "04-pipes.html#reading-text-files",
    "title": "Pipes and Filters",
    "section": "Reading Text Files",
    "text": "Reading Text Files\n\ncat prints the entire thing to screen.\ntail only the end\nhead only the beginning\nless lets you scroll and read (arrows up/down or j (up) and k (down), q exits.)\n\n$ head -n 3 ../animal-counts/animals.csv\n$ tail -n 2 ../animal-counts/animals.csv\n$ less ../../north-pacific-gyre/NENE01729A.txt"
  },
  {
    "objectID": "04-pipes.html#printing-text-with-echo",
    "href": "04-pipes.html#printing-text-with-echo",
    "title": "Pipes and Filters",
    "section": "Printing Text with echo",
    "text": "Printing Text with echo\n\nThe echo function prints text - by default to screen:\n\n$ echo hi\nhi\n\nBut you can redirect it to a file as well:\n\n$ echo I said hi! > echofile1.txt\n\n\n\n\n\n\nChallenge\n\n\nDo 2 times in a row:\n$ echo I said hi! > echofile1.txt\nNow do twice (notice >>!)\n$ echo I said hi! >> echofile2.txt\n\nWhat‚Äôs happening?"
  },
  {
    "objectID": "04-pipes.html#appending-to-files",
    "href": "04-pipes.html#appending-to-files",
    "title": "Pipes and Filters",
    "section": "Appending to Files",
    "text": "Appending to Files\n\n\n\n\n\n\nChallenge\n\n\nConsider the file shell-lesson-data/exercise-data/animal-counts/animals.csv. What is result of this:\n$ head -n 3 animals.csv > animals-subset.csv\n$ tail -n 2 animals.csv >> animals-subset.csv\n\nThe first three lines of animals.csv?\nThe last two lines of animals.csv?\nThe first three lines and the last two lines of animals.csv?\nThe second and third lines of animals.csv?\n\n\n\n\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\nOption 3 is correct."
  },
  {
    "objectID": "04-pipes.html#filtering-files-with-sort",
    "href": "04-pipes.html#filtering-files-with-sort",
    "title": "Pipes and Filters",
    "section": "Filtering Files with sort",
    "text": "Filtering Files with sort\n\nsort reads a file and sorts it‚Äôs content to screen\nit does not change the file.\n\n$ sort -n lengths.txt \n   9 methane.pdb\n  12 ethane.pdb\n  15 propane.pdb\n  20 cubane.pdb\n  21 pentane.pdb\n  30 octane.pdb\n 107 total"
  },
  {
    "objectID": "04-pipes.html#filtering-files-and-using-the-result",
    "href": "04-pipes.html#filtering-files-and-using-the-result",
    "title": "Pipes and Filters",
    "section": "Filtering Files and using the result",
    "text": "Filtering Files and using the result\n\nCool üòé but now we want to use this list.\nCould save it to a new file?\n\n$ sort -n lengths.txt > sorted_lengths.txt\n$ head -n 2 sorted_lengths.txt\n   9 methane.pdb\n  12 ethane.pdb"
  },
  {
    "objectID": "04-pipes.html#filtering-files-and-the-pipe",
    "href": "04-pipes.html#filtering-files-and-the-pipe",
    "title": "Pipes and Filters",
    "section": "Filtering Files and the pipe",
    "text": "Filtering Files and the pipe\n\nWe call | the pipe. It takes output from a command and gives it to another command.\nModern languages use their own version of this (R has a package and now also a native pipe, julia has of course a pipe etc. Stata not sure üòú)\nThe pipe allows us to do this without storing intermediate results.\n\n$ sort -n lengths.txt | head -n 1\n 9 methane.pdb\n\nBut, wait ü§î. Then we don‚Äôt even need lengths.txt:\n\n$ wc -l *.pdb | sort -n | head -n 1\n 9 methane.pdb\n\nThat‚Äôs a pipeline. ü§Ø"
  },
  {
    "objectID": "04-pipes.html#piping-away",
    "href": "04-pipes.html#piping-away",
    "title": "Pipes and Filters",
    "section": "Piping Away",
    "text": "Piping Away\n\nMake sure we are still in ~/shell-lesson-data/exercise-data/proteins\n\n\n\n\n\n\n\nPipe Dreams\n\n\nWhich of the following commands shows us the 3 files with the least number of lines in the current directory? Build the pipeline up from left to right to check!\n\nwc -l * > sort -n > head -n 3\nwc -l * | sort -n | head -n 1-3\nwc -l * | sort -n | tail -n 4 | head -n 3\nwc -l * | sort -n | head -n 3\n\n\n\n\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\nOption 4 is correct. Option 3 finds the ones with most lines."
  },
  {
    "objectID": "04-pipes.html#cutting-and-piping",
    "href": "04-pipes.html#cutting-and-piping",
    "title": "Pipes and Filters",
    "section": "Cutting and Piping",
    "text": "Cutting and Piping\n\nWe have a .csv file here: shell-lesson-data/exercise-data/animal-counts\nLet‚Äôs use the cut command to get parts of it.\n\n$ cd ~/shell-lesson-data/exercise-data/animal-counts\n$ cut -d , -f 2 animals.csv\n\n\n\n\n\n\nBuilding a Pipe\n\n\n\nuniq filters adjacent matching lines in a file.\nCan you extend the above command with uniq (and another command?) such that we get the list of unique animal names?\nAdd the -c flag to uniq to get a contingency table.\n\n\n\n\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\n\ncut -d , -f 2 animals.csv | sort | uniq\ncut -d , -f 2 animals.csv | sort | uniq -c"
  },
  {
    "objectID": "04-pipes.html#real-data",
    "href": "04-pipes.html#real-data",
    "title": "Pipes and Filters",
    "section": "Real Data",
    "text": "Real Data\n\nThe shell is very efficient for big data sets.\nYou can do stuff very quickly without loading anything into RAM of R or else:\n\n\n\n\n\n\n\nPrix des carburants en France\n\n\nUsing the shell:\n\nUse wget to download data to from here to your downloads folder as carburants.csv: wget https://www.data.gouv.fr/fr/datasets/r/64e02cff-9e53-4cb2-adfd-5fcc88b2dc09 -O ~/Downloads/carburants.csv\nuse wc -l to count how many rows (lines) there are\nuse head -n 1 to see the first row (the header)\nUse the above solution to build a contingency table that tells us the number of gas stations per ville."
  },
  {
    "objectID": "04-pipes.html#real-data-1",
    "href": "04-pipes.html#real-data-1",
    "title": "Pipes and Filters",
    "section": "Real Data",
    "text": "Real Data\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\n\nwget https://www.data.gouv.fr/fr/datasets/r/64e02cff-9e53-4cb2-adfd-5fcc88b2dc09 -O ~/Downloads/carburants.csv\ncd Downloads\nwc -l carburants.csv\ncut -d ';' -f 5 carburants.csv | sort | uniq -c | sort\ncut -d ';' -f 5 carburants.csv | tr [:lower:] [:upper:] | sort | uniq -c | sort\n\n\n\n\n\n\n\n\nScPo Intro To Programming 2023"
  },
  {
    "objectID": "02-filedir.html#intro",
    "href": "02-filedir.html#intro",
    "title": "Navigating Files and Directories",
    "section": "Intro",
    "text": "Intro\n\n\n\n\n\n\nQuestions\n\n\n\nHow can I move around on my computer?\nHow can I see what files and directories I have?\nHow can I specify the location of a file or directory on my computer?\n\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\nExplain the similarities and differences between a file and a directory.\nTranslate an absolute path into a relative path and vice versa.\nConstruct absolute and relative paths that identify specific files and directories.\nUse options and arguments to change the behaviour of a shell command.\nDemonstrate the use of tab completion and explain its advantages."
  },
  {
    "objectID": "02-filedir.html#the-file-system",
    "href": "02-filedir.html#the-file-system",
    "title": "Navigating Files and Directories",
    "section": "The File System",
    "text": "The File System\n\nThe file system organizes data into files and directories on your computer.\nlet‚Äôs start finding out where we are by running the pwd command - present working directory.\n\n$ pwd\nwith output:\n/Users/nelle\n\n\n\n\n\n\nHome Directory Variations\n\n\n\nLinux: /home/nelle\nWindows: C:\\Documents and Settings\\nelle\n\nif pwd does not return your home directory, may need to navigate there first with cd."
  },
  {
    "objectID": "02-filedir.html#nelles-home-directory",
    "href": "02-filedir.html#nelles-home-directory",
    "title": "Navigating Files and Directories",
    "section": "Nelle‚Äôs Home Directory",
    "text": "Nelle‚Äôs Home Directory\nNelle‚Äôs file system looks like this:\n\nThe file system is made up of a root directory that contains sub-directories titled bin, data, users, and tmp\n/ is the root of the system\nall other locations can be reached from there via a path\npath to homedir is from / to directory Users, which contains folder Nelle\nWe know exactly where the home is stored by looking at this path.\nNotice that inside a path, / is a separator. (It‚Äôs \\ on Windows!)"
  },
  {
    "objectID": "02-filedir.html#working-with-ls",
    "href": "02-filedir.html#working-with-ls",
    "title": "Navigating Files and Directories",
    "section": "Working with ls",
    "text": "Working with ls\n\ntype ls -F. This adds option F (for full) to the command.\nnow you get also\na trailing / indicates that this is a directory\n@ indicates a link\n* indicates an executable\n\n$ ls -F\nApplications/ Documents/    Library/      Music/        Public/\nDesktop/      Downloads/    Movies/       Pictures/\n\n\n\n\n\n\nquestion\n\n\nWhat kind of objects does Nelle‚Äôs home directory contain?"
  },
  {
    "objectID": "02-filedir.html#help",
    "href": "02-filedir.html#help",
    "title": "Navigating Files and Directories",
    "section": "Help",
    "text": "Help\n\n\n\n\n\n\nClear Terminal\n\n\n\nUse the clear command to clear terminal.\nyou can use your ‚Üë and ‚Üì keys to see previous commands, or just scroll up.\n\n\n\n\n\n\n\n\n\n\nGetting Help\n\n\n\npass the --help option to a command:\n\n$ ls --Help\n\nRead the manual entry with man (MacOS and Linux only)\n\nman ls \n\nSearch internet for unix man ls"
  },
  {
    "objectID": "02-filedir.html#more-ls-flags",
    "href": "02-filedir.html#more-ls-flags",
    "title": "Navigating Files and Directories",
    "section": "More ls Flags",
    "text": "More ls Flags\n\n\n\n\n\n\nChallenge\n\n\nYou can also use two options at the same time. What does the command ls do when used with the -l option? What about if you use both the -l and the -h option?\n\n\n\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\nThe -l option makes ls use a long listing format, showing not only the file/directory names but also additional information, such as the file size and the time of its last modification. If you use both the -h option and the -l option, this makes the file size ‚Äòhuman readable‚Äô, i.e.¬†displaying something like 5.3K instead of 5369."
  },
  {
    "objectID": "02-filedir.html#more-ls-challenges",
    "href": "02-filedir.html#more-ls-challenges",
    "title": "Navigating Files and Directories",
    "section": "More ls Challenges",
    "text": "More ls Challenges\n\n\n\n\n\n\nListing in Reverse Chronological Order\n\n\nBy default, ls lists the contents of a directory in alphabetical order by name. The command ls -t lists items by time of last change instead of alphabetically. The command ls -r lists the contents of a directory in reverse order. Which file is displayed last when you combine the -t and -r options? Hint: You may need to use the -l option to see the last changed dates.\n\n\n\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\nThe most recently changed file is listed last when using -rt. This can be very useful for finding your most recent edits or checking to see if a new output file was written."
  },
  {
    "objectID": "02-filedir.html#getting-data",
    "href": "02-filedir.html#getting-data",
    "title": "Navigating Files and Directories",
    "section": "Getting Data",
    "text": "Getting Data\n\nLet‚Äôs download some data\nunzip it and and move it to your home directory. (~, not Desktop!)"
  },
  {
    "objectID": "02-filedir.html#exploring-more-directories",
    "href": "02-filedir.html#exploring-more-directories",
    "title": "Navigating Files and Directories",
    "section": "Exploring More Directories",
    "text": "Exploring More Directories\n\nls can search other than only the current directories.\nLet‚Äôs see what is on our home:\n\n$ cd    # goes HOME\n$ ls -F .\nshows for Nelle only the data we just downloaded:\nshell-lesson-data/\n\nWe can also look inside that data from where we are:\n\n$ ls -F shell-less-data\nexercise-data/  north-pacific-gyre/\n\nlooks intriguing üßê. Let‚Äôs try and go there!"
  },
  {
    "objectID": "02-filedir.html#going-into-subdirectories",
    "href": "02-filedir.html#going-into-subdirectories",
    "title": "Navigating Files and Directories",
    "section": "Going into Subdirectories",
    "text": "Going into Subdirectories\n\ncd is for change directory. Moves the shell to a different location in the file system.\nLet‚Äôs go to our data folder:\n\n$ cd shell-lesson-data \n$ cd exercise-data\n\nNotice that the cd command does not print any output by default.\nRun ls -F again to see what‚Äôs in this directory!\nRun pwd to see where we are!"
  },
  {
    "objectID": "02-filedir.html#coming-back-from-subdirectories",
    "href": "02-filedir.html#coming-back-from-subdirectories",
    "title": "Navigating Files and Directories",
    "section": "Coming Back from Subdirectories",
    "text": "Coming Back from Subdirectories\n\nNow we want to go back up one level.\nIt‚Äôs tempting to say cd shell-lesson-data\nBut cd can only go into its own subdirectories.\nIt has a special one: .. is its parent directory, so goes one up.\n\n$ cd ..\n$ pwd\nputs Nelle back into\n/Users/nelle/shell-lesson-data\n\nNotice how .. is listed if you flag -a on the ls command."
  },
  {
    "objectID": "02-filedir.html#hidden-files",
    "href": "02-filedir.html#hidden-files",
    "title": "Navigating Files and Directories",
    "section": "Hidden Files",
    "text": "Hidden Files\n\n\n\n\n\n\nHidden Files\n\n\n\nTyping cd without any arguments puts you back into your Home directory. Do it.\nLet‚Äôs use ls -F -a or ls -Fa to list all files. Also hidden ones!\n\n\n\n\n\n\n\n\n\n\nRelative and Absolute Paths\n\n\n\nUp until now, we used relative paths. cd and ls operated from our current position in the file sytem.\nWe can also specify the absolute path, i.e.¬†starting at the root /. This allows to go anywhere from anywhere."
  },
  {
    "objectID": "02-filedir.html#more-shortcuts",
    "href": "02-filedir.html#more-shortcuts",
    "title": "Navigating Files and Directories",
    "section": "More Shortcuts",
    "text": "More Shortcuts\n\n\n\n\n\n\nTilde (~) and dash (-)\n\n\n\nThe tilde ~ in first position means current user‚Äôs home\nThe dash in cd - means go into the directory I was previously in.\nSo:\n\n\ncd .. brings you up one level\ncd - takes you back to wherever you‚Äôve come from."
  },
  {
    "objectID": "02-filedir.html#challenges",
    "href": "02-filedir.html#challenges",
    "title": "Navigating Files and Directories",
    "section": "Challenges",
    "text": "Challenges\n\n\n\n\n\n\nChallenge\n\n\nStarting from /Users/amanda/data, which of the following commands could Amanda use to navigate to her home directory, which is /Users/amanda?\n\ncd .\ncd /\ncd /home/amanda\ncd ../..\ncd ~\ncd home\ncd ~/data/..\ncd\ncd .."
  },
  {
    "objectID": "02-filedir.html#solution-2",
    "href": "02-filedir.html#solution-2",
    "title": "Navigating Files and Directories",
    "section": "Solution",
    "text": "Solution\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\n\nNo: . stands for the current directory.\nNo: / stands for the root directory.\nNo: Amanda‚Äôs home directory is /Users/amanda.\nNo: this command goes up two levels, i.e.¬†ends in /Users.\nYes: ~ stands for the user‚Äôs home directory, in this case /Users/amanda.\nNo: this command would navigate into a directory home in the current directory if it exists.\nYes: unnecessarily complicated, but correct.\nYes: shortcut to go back to the user‚Äôs home directory.\nYes: goes up one level."
  },
  {
    "objectID": "02-filedir.html#solution-4",
    "href": "02-filedir.html#solution-4",
    "title": "Navigating Files and Directories",
    "section": "Solution",
    "text": "Solution\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\n\nNo: there is a directory backup in /Users.\nNo: this is the content of Users/thing/backup, but with .., we asked for one level further up.\nNo: see previous explanation.\nYes: ../backup/ refers to /Users/backup/."
  },
  {
    "objectID": "02-filedir.html#solution-6",
    "href": "02-filedir.html#solution-6",
    "title": "Navigating Files and Directories",
    "section": "Solution",
    "text": "Solution\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\n\nNo: pwd is not the name of a directory.\nYes: ls without directory argument lists files and directories in the current directory.\nYes: uses the absolute path explicitly."
  },
  {
    "objectID": "02-filedir.html#general-syntax-of-shell-commands",
    "href": "02-filedir.html#general-syntax-of-shell-commands",
    "title": "Navigating Files and Directories",
    "section": "General Syntax of Shell Commands",
    "text": "General Syntax of Shell Commands\nLet‚Äôs take as example this command:\n$ ls -F /\n\nGeneral syntax of a shell command\nThe space between ls and whatever options you put is important.\nCapitalization is important. ls -s is not the same as ls -S:\n\n$ cd ~/shell-lesson-data\n$ ls -s exercise-data  # size\n$ ls -S exercise-data  # sort by size"
  },
  {
    "objectID": "02-filedir.html#nelles-pipeline-and-tab-completion",
    "href": "02-filedir.html#nelles-pipeline-and-tab-completion",
    "title": "Navigating Files and Directories",
    "section": "Nelle‚Äôs Pipeline and Tab Completion",
    "text": "Nelle‚Äôs Pipeline and Tab Completion\n\nNelle organized the output of the assay machine into north-pacific-gyre/. let‚Äôs go there.\n\n$ cd ~/shell-lesson-data/\n$ cd north-pacific-gyre\n\nNow north-pacific-gyre is a mouthful to write. try instead to type cd n and hit the TAB key.\nhitting TAB twice without any leading character, gives you a list of files in pwd."
  }
]