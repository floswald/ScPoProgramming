[
  {
    "objectID": "01-shell-intro.html#intro",
    "href": "01-shell-intro.html#intro",
    "title": "The Unix Shell",
    "section": "Intro",
    "text": "Intro\n\n\n\n\n\n\nQuestion\n\n\n\nWhat is a command shell and why would I use one?\n\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\nExplain how the shell relates to the keyboard, the screen, the operating system, and users‚Äô programs.\nExplain when and why command-line interfaces should be used instead of graphical interfaces."
  },
  {
    "objectID": "01-shell-intro.html#do-you-gui",
    "href": "01-shell-intro.html#do-you-gui",
    "title": "The Unix Shell",
    "section": "Do You GUI?",
    "text": "Do You GUI?\n\n\n\n\n\n\nWhat‚Äôs a GUI\n\n\nA Graphical User Interface (GUI) lets the user interact by clicking with a mouse and using menus.\n\n\n\n\n\nI love üòç a good Graphical User Interface (GUI)\n\n\n\n\nBut. Bad things can happen.\n\n\n\n\n‚ò†Ô∏è"
  },
  {
    "objectID": "01-shell-intro.html#bad.",
    "href": "01-shell-intro.html#bad.",
    "title": "The Unix Shell",
    "section": "Bad.",
    "text": "Bad.\n\n\n\n\n\n\n\n\nNo More than 65,536 Rows\n\n\n\nPublic Health England missed 14.000 covid cases\nThey used .xls document to collect data.\n\n\n\n\n\n\n\n\n\n\n\nNo Growth with High Debt?\n\n\n\nReinhardt and Rogoff controversy.1\nInadvertently did not select all relevant countries on spreadsheet.\n\n\n\n\n\n\nBoth are eminent researchers and we do not imply misconduct."
  },
  {
    "objectID": "01-shell-intro.html#or-do-you-cli",
    "href": "01-shell-intro.html#or-do-you-cli",
    "title": "The Unix Shell",
    "section": "Or Do you CLI?",
    "text": "Or Do you CLI?\n\n\n\n\n\n\nWhat‚Äôs a CLI\n\n\nA Command Line Interface (CLI) allows interaction via (text) commands.\n\n\n\n\nCLIs can collect commands somewhere - reproducible\nBut one has to learn a language.\nThey are great for long, repetitive tasks.\nIt‚Äôs often the only way to interact with high-performance computing. ‚Äì> Show!"
  },
  {
    "objectID": "01-shell-intro.html#the-shell",
    "href": "01-shell-intro.html#the-shell",
    "title": "The Unix Shell",
    "section": "The Shell",
    "text": "The Shell\n\nThe shell is a program where we can type in commands and get output.\nWe often use very simple programs - good for just one thing.\nThere is tremendous power in combining those little programs.\nIt‚Äôs a platform approach to an Operating System.\n\n\n\n\n\n\n\nUnix is a Platform\n\n\nA protocol and many small program who interact according to the rules with each other\n\n\n\n\nlewing@isc.tamu.edu Larry Ewing and The GIMP, Attribution, via Wikimedia Commons"
  },
  {
    "objectID": "01-shell-intro.html#go",
    "href": "01-shell-intro.html#go",
    "title": "The Unix Shell",
    "section": "Go! üöÄ",
    "text": "Go! üöÄ\n\nOpen your terminal! (GitBash on Windows)\nYou should see something like\n\n$\nwhich is called the prompt.\n\nYou don‚Äôt have to type the $!\nnext to it, you see a cursor."
  },
  {
    "objectID": "01-shell-intro.html#first-command-ls",
    "href": "01-shell-intro.html#first-command-ls",
    "title": "The Unix Shell",
    "section": "First command: ls",
    "text": "First command: ls\n\ntype ls and hit enter\nyou see something like this as output:\n\nDesktop     Downloads   Movies      Pictures\nDocuments   Library     Music       Public\n\nBy default, the terminal opens in your home directory.\nls lists the content of that directory."
  },
  {
    "objectID": "01-shell-intro.html#first-error",
    "href": "01-shell-intro.html#first-error",
    "title": "The Unix Shell",
    "section": "First Error!",
    "text": "First Error!\n\n\n\n\n\n\nDanger\n\n\n\nIf you mistype a command, or look for a program that is not installed, you get an error. Like:\n\nbash-3.2$ ks\nbash: ks: command not found\n\n\n\n\nLook for a spelling mistake (it‚Äôs ls not ks)\nOr install the required program."
  },
  {
    "objectID": "01-shell-intro.html#nelles-pipeline-a-typical-problem",
    "href": "01-shell-intro.html#nelles-pipeline-a-typical-problem",
    "title": "The Unix Shell",
    "section": "Nelle‚Äôs Pipeline: A Typical Problem",
    "text": "Nelle‚Äôs Pipeline: A Typical Problem\n\nNelle Nemo is a marine biologist. üåä üê°\nJust sampled gelatinous marine life in the Great Pacific Garbage Patch.\nFrom 1520 samples she obtained measures of the relative abundance of 300 proteins.\nHer supervisor, Professor Jones, handed down to hear a program called goostats.sh.\ngoostats.sh needs to be run on each of the 1520 samples.\nPaper needs to be ready by the end of the month."
  },
  {
    "objectID": "01-shell-intro.html#battle-plan",
    "href": "01-shell-intro.html#battle-plan",
    "title": "The Unix Shell",
    "section": "Battle Plan",
    "text": "Battle Plan\n\nUsing a GUI to run goostats.sh, Nelle will have to use her mouse to select and open a file 1520 times.\nIf goostats.sh takes 30 secs to run, this will take more than 12 hours of Nelle‚Äôs active time.\nWith the help of the shell, Nelle could make her computer go through that list of files instead.\nBonus : she will have a working pipeline, that can be re-run each time need be."
  },
  {
    "objectID": "01-shell-intro.html#what-does-nelle-need",
    "href": "01-shell-intro.html#what-does-nelle-need",
    "title": "The Unix Shell",
    "section": "What Does Nelle Need",
    "text": "What Does Nelle Need\nNelle has needs to learn the following things:\n\nnavigate to a file/directory\ncreate a file/directory\ncheck the length of a file\nchain commands together\nretrieve a set of files\niterate over files\nrun a shell script containing her pipeline\n\nAnd we will be right next to her. üôÇ"
  },
  {
    "objectID": "01-shell-intro.html#section-2",
    "href": "01-shell-intro.html#section-2",
    "title": "The Unix Shell",
    "section": "",
    "text": "Key Points\n\n\n\nA shell is a program whose primary purpose is to read commands and run other programs.\nThis lesson uses Bash, the default shell in many implementations of Unix.\nPrograms can be run in Bash by entering commands at the command-line prompt.\nThe shell‚Äôs main advantages are its high action-to-keystroke ratio, its support for automating repetitive tasks, and its capacity to access networked machines.\nThe shell‚Äôs main disadvantages are its primarily textual nature and how cryptic its commands and operation can be.\n\n\n\n\n\n\n\nScPo Intro To Programming 2023"
  },
  {
    "objectID": "03-filework.html#intro",
    "href": "03-filework.html#intro",
    "title": "Working with Files and Directories",
    "section": "Intro",
    "text": "Intro\n\n\n\n\n\n\nQuestions\n\n\n\nHow can I create, copy, and delete files and directories?\nHow can I edit files?\n\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\nCreate a directory hierarchy that matches a given diagram.\nCreate files in that hierarchy using an editor or by copying and renaming existing files.\nDelete, copy and move specified files and/or directories."
  },
  {
    "objectID": "03-filework.html#creating-directories",
    "href": "03-filework.html#creating-directories",
    "title": "Working with Files and Directories",
    "section": "Creating Directories",
    "text": "Creating Directories\n\nLet‚Äôs create a directory thesis here:\n\n$ cd ~/shell-lesson-data/exercise-data/writing\n$ ls -F\nthis outputs:\nhaiku.txt  LittleWomen.txt\n\nUse mkdir to create:\n\n$ mkdir thesis\nused like this, thesis is created in the current directory. While with the -p flag we created nested subdirectories:\n$ mkdir -p ../project/data ../project/results"
  },
  {
    "objectID": "03-filework.html#good-file-names",
    "href": "03-filework.html#good-file-names",
    "title": "Working with Files and Directories",
    "section": "Good File Names",
    "text": "Good File Names\n\n\n\n\n\n\nBad File Names\n\n\n\nDon‚Äôt use spaces. north pacific gyre is not a good one. Use north-pacific-gyre instead.\nDon‚Äôt begin with -.\nStick with letters, numbers, ., -, and _"
  },
  {
    "objectID": "03-filework.html#creating-a-text-file",
    "href": "03-filework.html#creating-a-text-file",
    "title": "Working with Files and Directories",
    "section": "Creating a Text File",
    "text": "Creating a Text File\n\nLet‚Äôs go into the thesis directory and create a text file called draft.txt.\n\n$ cd thesis\n$ nano draft.txt\n\n\n\n\n\n\nTEXT Editor\n\n\nnano is a super simple editor, and you can use it only to edit text files (That‚Äôs normal for text editors üòâ). You will probably switch to a more powerful editor later on (I recommend VSCode), but nano is a good starting point. Notice that ^ key is the Ctrl key, so ^X means Ctrl + X."
  },
  {
    "objectID": "03-filework.html#filename-extensions",
    "href": "03-filework.html#filename-extensions",
    "title": "Working with Files and Directories",
    "section": "Filename Extensions",
    "text": "Filename Extensions\nTask\n\nGo to your home directory: cd\ncreate an empty file with the touch command:\n\n$ # this is a comment, by the way \n$ cd  # so, going home.\n$ touch new_doc.pdf  # creating an empty file.\n\nOpen your file browser and double click on new_doc.pdf. What is going to happen?"
  },
  {
    "objectID": "03-filework.html#moving-files-and-directories",
    "href": "03-filework.html#moving-files-and-directories",
    "title": "Working with Files and Directories",
    "section": "Moving Files and Directories",
    "text": "Moving Files and Directories\n\nLet‚Äôs go back to the writing directory\n\n$ cd ~/shell-lesson-data/exercise-data/writing\n\nLet‚Äôs rename draft.txt to quotes.txt with mv.\n\n$ mv thesis/draft.txt thesis/quotes.txt\n\nNow let‚Äôs actually move it into the current dir:\n\n$ mv thesis/quotes.txt .\n\nNotice: mv x y means x is gone afterwards!"
  },
  {
    "objectID": "03-filework.html#copying-files-and-directories",
    "href": "03-filework.html#copying-files-and-directories",
    "title": "Working with Files and Directories",
    "section": "Copying Files and Directories",
    "text": "Copying Files and Directories\n\ncp x y is similar to mv x y, but you keep x.\n\n$ cp quotes.txt thesis/quotations.txt\n$ ls quotes.txt thesis/quotations.txt\n\nthe -r option means recursively and copies entire folders:\n\n$ cp -r thesis thesis_backup\n$ ls thesis thesis_backup\n\nNotice that rm -r mydir will delete everything inside the mydir folder!"
  },
  {
    "objectID": "03-filework.html#using-wildcards",
    "href": "03-filework.html#using-wildcards",
    "title": "Working with Files and Directories",
    "section": "Using Wildcards",
    "text": "Using Wildcards\n\nthe * character is a wildcard, i.e it matches all characters:\n\n$ cd shell-lesson-data/exercise-data/\n$ ls proteins/p*\nproteins/pentane.pdb    proteins/propane.pdb"
  },
  {
    "objectID": "03-filework.html#reproducing-a-folder-structure",
    "href": "03-filework.html#reproducing-a-folder-structure",
    "title": "Working with Files and Directories",
    "section": "Reproducing a Folder Structure",
    "text": "Reproducing a Folder Structure\nSuppose we want to create the following structure on our computer:\n2016-05-20/\n‚îî‚îÄ‚îÄ data\n   ‚îú‚îÄ‚îÄ processed\n   ‚îî‚îÄ‚îÄ raw\n\n\n\n\n\n\nChallenge\n\n\nWhich sequence will achieve this result?\n1.\n$ mkdir 2016-05-20\n$ mkdir 2016-05-20/data\n$ mkdir 2016-05-20/data/processed\n$ mkdir 2016-05-20/data/raw\n2.\n$ mkdir 2016-05-20/data/raw\n$ mkdir 2016-05-20/data/processed\n3.\n$ mkdir -p 2016-05-20/data/raw\n$ mkdir -p 2016-05-20/data/processed"
  },
  {
    "objectID": "03-filework.html#nice-trick",
    "href": "03-filework.html#nice-trick",
    "title": "Working with Files and Directories",
    "section": "Nice Trick",
    "text": "Nice Trick\n\nOh by the way.\nIf you are on MacOS, try to this on the command line\n\n$ open .\n\nPretty handy!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ScPoProgramming",
    "section": "",
    "text": "This website is the home of the course Introduction to Programming taught to first year PhD students (M1) in the doctoral program of the department of economics at Sciences Po Paris.\nThis course assumes no prior programming experience.\nBelow you will find setup instructions and a syllabus.\nYou can obtain all material for this course from the associated github repository at link\n\n\n\n\nAfter this course, we want to be able to participate or conduct your own research project in an efficient way. Research nowadays means data sciencey stuff in most cases, certainly in Economics.\nWe want you to have a basic understanding of how an operating system (in particular, your OS) works.\nWe want to be able to achieve a basic level of automation in repetitive tasks.\nWe want you to know what Version Control is and how to use it in a research project.\nWe will introduce some (hopefully) useful R programming.\n¬© Florian Oswald, 2023"
  },
  {
    "objectID": "index.html#windows-and-mac-specific-instructions",
    "href": "index.html#windows-and-mac-specific-instructions",
    "title": "ScPoProgramming",
    "section": "Windows and Mac Specific Instructions",
    "text": "Windows and Mac Specific Instructions\nThere are different instructions depending on whether you have a Mac or a Windows computer. Unix-based computers are similar to Macs in most respects.\n\nWindows\nWe need to install some things that make your windows computer a resemble a bit a Unix box. In particular, we want to be able to use the unix shell. Therefore, I want you to download and install\n\nGitForWindows\n\nSpecifics:\n\nDuring the installation process, choose all default settings.\nAt one point, you are offered a choice for a default editor being used for git. If you know vim already, why not (I use vim), otherwise I recommend nano, which is a simple to use editor that runs inside your command line - we want to avoid having to open an external window of a separate editor for our tasks (i.e.¬†don‚Äôt choose notepad and other standalone editors).\n\n\n\nMac\nYou should be all set. To make sure we have really everything we need, open Terminal.app (in Applications > Utilities or do Cmd + Space to get spotlight search and type terminal). Then paste this code and hit enter:\nxcode-select --install\nclick on install (don‚Äôt click on get Xcode)\n\n\nUnix\nSame, all set. Maybe open a terminal and type\ngit --version\nif that throws an error, install it with your package manager, e.g.\nsudo apt install git-all"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n\n¬© Florian Oswald, 2023"
  },
  {
    "objectID": "04-pipes.html#combining-commands",
    "href": "04-pipes.html#combining-commands",
    "title": "Pipes and Filters",
    "section": "Combining Commands",
    "text": "Combining Commands\n\nWe are now ready to combine some of the commands we learned.\nYou will see that here is where the real power lies.\nLet‚Äôs navigate into our exercise data folder first.\n\n$ cd ~/shell-lesson-data/exercise-data/proteins\n$ ls\ncubane.pdb   ethane.pdb   methane.pdb  octane.pdb   pentane.pdb  propane.pdb\n\nThose are protein data bank files."
  },
  {
    "objectID": "04-pipes.html#capturing-output",
    "href": "04-pipes.html#capturing-output",
    "title": "Pipes and Filters",
    "section": "Capturing Output",
    "text": "Capturing Output\n\nIntroducing the wc word count command.\n\nwc cubane.pdb\n20     156    1158 cubane.pdb\n29 lines, 156 words, 1158 characters.\n\nLet‚Äôs redirect the output of wc to a file instead with >:\n\nwc -l *.pdb > lengths.txt\n\nno ouput on screen, you see? but now there is a new file: lengths.txt.\nLet‚Äôs concatenate its content (i.e.¬†join together) and print to screen:\n\n$ cat lengths.txt \n      20 cubane.pdb\n      12 ethane.pdb\n       9 methane.pdb\n      30 octane.pdb\n      21 pentane.pdb\n      15 propane.pdb\n     107 total"
  },
  {
    "objectID": "04-pipes.html#reading-text-files",
    "href": "04-pipes.html#reading-text-files",
    "title": "Pipes and Filters",
    "section": "Reading Text Files",
    "text": "Reading Text Files\n\ncat prints the entire thing to screen.\ntail only the end\nhead only the beginning\nless lets you scroll and read (arrows up/down or j (up) and k (down), q exits.)\n\n$ head -n 3 ../animal-counts/animals.csv\n$ tail -n 2 ../animal-counts/animals.csv\n$ less ../../north-pacific-gyre/NENE01729A.txt"
  },
  {
    "objectID": "04-pipes.html#printing-text-with-echo",
    "href": "04-pipes.html#printing-text-with-echo",
    "title": "Pipes and Filters",
    "section": "Printing Text with echo",
    "text": "Printing Text with echo\n\nThe echo function prints text - by default to screen:\n\n$ echo hi\nhi\n\nBut you can redirect it to a file as well:\n\n$ echo I said hi! > echofile1.txt\n\n\n\n\n\n\nChallenge\n\n\nDo 2 times in a row:\n$ echo I said hi! > echofile1.txt\nNow do twice (notice >>!)\n$ echo I said hi! >> echofile2.txt\n\nWhat‚Äôs happening?"
  },
  {
    "objectID": "04-pipes.html#appending-to-files",
    "href": "04-pipes.html#appending-to-files",
    "title": "Pipes and Filters",
    "section": "Appending to Files",
    "text": "Appending to Files\n\n\n\n\n\n\nChallenge\n\n\nConsider the file shell-lesson-data/exercise-data/animal-counts/animals.csv. What is result of this:\n$ head -n 3 animals.csv > animals-subset.csv\n$ tail -n 2 animals.csv >> animals-subset.csv\n\nThe first three lines of animals.csv?\nThe last two lines of animals.csv?\nThe first three lines and the last two lines of animals.csv?\nThe second and third lines of animals.csv?\n\n\n\n\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\nOption 3 is correct."
  },
  {
    "objectID": "04-pipes.html#filtering-files-with-sort",
    "href": "04-pipes.html#filtering-files-with-sort",
    "title": "Pipes and Filters",
    "section": "Filtering Files with sort",
    "text": "Filtering Files with sort\n\nsort reads a file and sorts it‚Äôs content to screen\nit does not change the file.\n\n$ sort -n lengths.txt \n   9 methane.pdb\n  12 ethane.pdb\n  15 propane.pdb\n  20 cubane.pdb\n  21 pentane.pdb\n  30 octane.pdb\n 107 total"
  },
  {
    "objectID": "04-pipes.html#filtering-files-and-using-the-result",
    "href": "04-pipes.html#filtering-files-and-using-the-result",
    "title": "Pipes and Filters",
    "section": "Filtering Files and using the result",
    "text": "Filtering Files and using the result\n\nCool üòé but now we want to use this list.\nCould save it to a new file?\n\n$ sort -n lengths.txt > sorted_lengths.txt\n$ head -n 2 sorted_lengths.txt\n   9 methane.pdb\n  12 ethane.pdb"
  },
  {
    "objectID": "04-pipes.html#filtering-files-and-the-pipe",
    "href": "04-pipes.html#filtering-files-and-the-pipe",
    "title": "Pipes and Filters",
    "section": "Filtering Files and the pipe",
    "text": "Filtering Files and the pipe\n\nWe call | the pipe. It takes output from a command and gives it to another command.\nModern languages use their own version of this (R has a package and now also a native pipe, julia has of course a pipe etc. Stata not sure üòú)\nThe pipe allows us to do this without storing intermediate results.\n\n$ sort -n lengths.txt | head -n 1\n 9 methane.pdb\n\nBut, wait ü§î. Then we don‚Äôt even need lengths.txt:\n\n$ wc -l *.pdb | sort -n | head -n 1\n 9 methane.pdb\n\nThat‚Äôs a pipeline. ü§Ø"
  },
  {
    "objectID": "04-pipes.html#piping-away",
    "href": "04-pipes.html#piping-away",
    "title": "Pipes and Filters",
    "section": "Piping Away",
    "text": "Piping Away\n\nMake sure we are still in ~/shell-lesson-data/exercise-data/proteins\n\n\n\n\n\n\n\nPipe Dreams\n\n\nWhich of the following commands shows us the 3 files with the least number of lines in the current directory? Build the pipeline up from left to right to check!\n\nwc -l * > sort -n > head -n 3\nwc -l * | sort -n | head -n 1-3\nwc -l * | sort -n | tail -n 4 | head -n 3\nwc -l * | sort -n | head -n 3\n\n\n\n\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\nOption 4 is correct. Option 3 finds the ones with most lines."
  },
  {
    "objectID": "04-pipes.html#cutting-and-piping",
    "href": "04-pipes.html#cutting-and-piping",
    "title": "Pipes and Filters",
    "section": "Cutting and Piping",
    "text": "Cutting and Piping\n\nWe have a .csv file here: shell-lesson-data/exercise-data/animal-counts\nLet‚Äôs use the cut command to get parts of it.\n\n$ cd ~/shell-lesson-data/exercise-data/animal-counts\n$ cut -d , -f 2 animals.csv\n\n\n\n\n\n\nBuilding a Pipe\n\n\n\nuniq filters adjacent matching lines in a file.\nCan you extend the above command with uniq (and another command?) such that we get the list of unique animal names?\nAdd the -c flag to uniq to get a contingency table.\n\n\n\n\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\n\ncut -d , -f 2 animals.csv | sort | uniq\ncut -d , -f 2 animals.csv | sort | uniq -c"
  },
  {
    "objectID": "04-pipes.html#real-data",
    "href": "04-pipes.html#real-data",
    "title": "Pipes and Filters",
    "section": "Real Data",
    "text": "Real Data\n\nThe shell is very efficient for big data sets.\nYou can do stuff very quickly without loading anything into RAM of R or else:\n\n\n\n\n\n\n\nPrix des carburants en France\n\n\nUsing the shell:\n\nUse wget to download data to from here to your downloads folder as carburants.csv: wget https://www.data.gouv.fr/fr/datasets/r/64e02cff-9e53-4cb2-adfd-5fcc88b2dc09 -O ~/Downloads/carburants.csv\nuse wc -l to count how many rows (lines) there are\nuse head -n 1 to see the first row (the header)\nUse the above solution to build a contingency table that tells us the number of gas stations per ville."
  },
  {
    "objectID": "04-pipes.html#real-data-1",
    "href": "04-pipes.html#real-data-1",
    "title": "Pipes and Filters",
    "section": "Real Data",
    "text": "Real Data\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\n\nwget https://www.data.gouv.fr/fr/datasets/r/64e02cff-9e53-4cb2-adfd-5fcc88b2dc09 -O ~/Downloads/carburants.csv\ncd Downloads\nwc -l carburants.csv\ncut -d ';' -f 5 carburants.csv | sort | uniq -c | sort\ncut -d ';' -f 5 carburants.csv | tr [:lower:] [:upper:] | sort | uniq -c | sort\n\n\n\n\n\n\n\n\nScPo Intro To Programming 2023"
  },
  {
    "objectID": "02-filedir.html#intro",
    "href": "02-filedir.html#intro",
    "title": "Navigating Files and Directories",
    "section": "Intro",
    "text": "Intro\n\n\n\n\n\n\nQuestions\n\n\n\nHow can I move around on my computer?\nHow can I see what files and directories I have?\nHow can I specify the location of a file or directory on my computer?\n\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\nExplain the similarities and differences between a file and a directory.\nTranslate an absolute path into a relative path and vice versa.\nConstruct absolute and relative paths that identify specific files and directories.\nUse options and arguments to change the behaviour of a shell command.\nDemonstrate the use of tab completion and explain its advantages."
  },
  {
    "objectID": "02-filedir.html#the-file-system",
    "href": "02-filedir.html#the-file-system",
    "title": "Navigating Files and Directories",
    "section": "The File System",
    "text": "The File System\n\nThe file system organizes data into files and directories on your computer.\nlet‚Äôs start finding out where we are by running the pwd command - present working directory.\n\n$ pwd\nwith output:\n/Users/nelle\n\n\n\n\n\n\nHome Directory Variations\n\n\n\nLinux: /home/nelle\nWindows: C:\\Documents and Settings\\nelle\n\nif pwd does not return your home directory, may need to navigate there first with cd."
  },
  {
    "objectID": "02-filedir.html#nelles-home-directory",
    "href": "02-filedir.html#nelles-home-directory",
    "title": "Navigating Files and Directories",
    "section": "Nelle‚Äôs Home Directory",
    "text": "Nelle‚Äôs Home Directory\nNelle‚Äôs file system looks like this:\n\nThe file system is made up of a root directory that contains sub-directories titled bin, data, users, and tmp\n/ is the root of the system\nall other locations can be reached from there via a path\npath to homedir is from / to directory Users, which contains folder Nelle\nWe know exactly where the home is stored by looking at this path.\nNotice that inside a path, / is a separator. (It‚Äôs \\ on Windows!)"
  },
  {
    "objectID": "02-filedir.html#working-with-ls",
    "href": "02-filedir.html#working-with-ls",
    "title": "Navigating Files and Directories",
    "section": "Working with ls",
    "text": "Working with ls\n\ntype ls -F. This adds option F (for full) to the command.\nnow you get also\na trailing / indicates that this is a directory\n@ indicates a link\n* indicates an executable\n\n$ ls -F\nApplications/ Documents/    Library/      Music/        Public/\nDesktop/      Downloads/    Movies/       Pictures/\n\n\n\n\n\n\nquestion\n\n\nWhat kind of objects does Nelle‚Äôs home directory contain?"
  },
  {
    "objectID": "02-filedir.html#help",
    "href": "02-filedir.html#help",
    "title": "Navigating Files and Directories",
    "section": "Help",
    "text": "Help\n\n\n\n\n\n\nClear Terminal\n\n\n\nUse the clear command to clear terminal.\nyou can use your ‚Üë and ‚Üì keys to see previous commands, or just scroll up.\n\n\n\n\n\n\n\n\n\n\nGetting Help\n\n\n\npass the --help option to a command:\n\n$ ls --Help\n\nRead the manual entry with man (MacOS and Linux only)\n\nman ls \n\nSearch internet for unix man ls"
  },
  {
    "objectID": "02-filedir.html#more-ls-flags",
    "href": "02-filedir.html#more-ls-flags",
    "title": "Navigating Files and Directories",
    "section": "More ls Flags",
    "text": "More ls Flags\n\n\n\n\n\n\nChallenge\n\n\nYou can also use two options at the same time. What does the command ls do when used with the -l option? What about if you use both the -l and the -h option?\n\n\n\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\nThe -l option makes ls use a long listing format, showing not only the file/directory names but also additional information, such as the file size and the time of its last modification. If you use both the -h option and the -l option, this makes the file size ‚Äòhuman readable‚Äô, i.e.¬†displaying something like 5.3K instead of 5369."
  },
  {
    "objectID": "02-filedir.html#more-ls-challenges",
    "href": "02-filedir.html#more-ls-challenges",
    "title": "Navigating Files and Directories",
    "section": "More ls Challenges",
    "text": "More ls Challenges\n\n\n\n\n\n\nListing in Reverse Chronological Order\n\n\nBy default, ls lists the contents of a directory in alphabetical order by name. The command ls -t lists items by time of last change instead of alphabetically. The command ls -r lists the contents of a directory in reverse order. Which file is displayed last when you combine the -t and -r options? Hint: You may need to use the -l option to see the last changed dates.\n\n\n\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\nThe most recently changed file is listed last when using -rt. This can be very useful for finding your most recent edits or checking to see if a new output file was written."
  },
  {
    "objectID": "02-filedir.html#getting-data",
    "href": "02-filedir.html#getting-data",
    "title": "Navigating Files and Directories",
    "section": "Getting Data",
    "text": "Getting Data\n\nLet‚Äôs download some data\nunzip it and and move it to your home directory. (~, not Desktop!)"
  },
  {
    "objectID": "02-filedir.html#exploring-more-directories",
    "href": "02-filedir.html#exploring-more-directories",
    "title": "Navigating Files and Directories",
    "section": "Exploring More Directories",
    "text": "Exploring More Directories\n\nls can search other than only the current directories.\nLet‚Äôs see what is on our home:\n\n$ cd    # goes HOME\n$ ls -F .\nshows for Nelle only the data we just downloaded:\nshell-lesson-data/\n\nWe can also look inside that data from where we are:\n\n$ ls -F shell-less-data\nexercise-data/  north-pacific-gyre/\n\nlooks intriguing üßê. Let‚Äôs try and go there!"
  },
  {
    "objectID": "02-filedir.html#going-into-subdirectories",
    "href": "02-filedir.html#going-into-subdirectories",
    "title": "Navigating Files and Directories",
    "section": "Going into Subdirectories",
    "text": "Going into Subdirectories\n\ncd is for change directory. Moves the shell to a different location in the file system.\nLet‚Äôs go to our data folder:\n\n$ cd shell-lesson-data \n$ cd exercise-data\n\nNotice that the cd command does not print any output by default.\nRun ls -F again to see what‚Äôs in this directory!\nRun pwd to see where we are!"
  },
  {
    "objectID": "02-filedir.html#coming-back-from-subdirectories",
    "href": "02-filedir.html#coming-back-from-subdirectories",
    "title": "Navigating Files and Directories",
    "section": "Coming Back from Subdirectories",
    "text": "Coming Back from Subdirectories\n\nNow we want to go back up one level.\nIt‚Äôs tempting to say cd shell-lesson-data\nBut cd can only go into its own subdirectories.\nIt has a special one: .. is its parent directory, so goes one up.\n\n$ cd ..\n$ pwd\nputs Nelle back into\n/Users/nelle/shell-lesson-data\n\nNotice how .. is listed if you flag -a on the ls command."
  },
  {
    "objectID": "02-filedir.html#hidden-files",
    "href": "02-filedir.html#hidden-files",
    "title": "Navigating Files and Directories",
    "section": "Hidden Files",
    "text": "Hidden Files\n\n\n\n\n\n\nHidden Files\n\n\n\nTyping cd without any arguments puts you back into your Home directory. Do it.\nLet‚Äôs use ls -F -a or ls -Fa to list all files. Also hidden ones!\n\n\n\n\n\n\n\n\n\n\nRelative and Absolute Paths\n\n\n\nUp until now, we used relative paths. cd and ls operated from our current position in the file sytem.\nWe can also specify the absolute path, i.e.¬†starting at the root /. This allows to go anywhere from anywhere."
  },
  {
    "objectID": "02-filedir.html#more-shortcuts",
    "href": "02-filedir.html#more-shortcuts",
    "title": "Navigating Files and Directories",
    "section": "More Shortcuts",
    "text": "More Shortcuts\n\n\n\n\n\n\nTilde (~) and dash (-)\n\n\n\nThe tilde ~ in first position means current user‚Äôs home\nThe dash in cd - means go into the directory I was previously in.\nSo:\n\n\ncd .. brings you up one level\ncd - takes you back to wherever you‚Äôve come from."
  },
  {
    "objectID": "02-filedir.html#challenges",
    "href": "02-filedir.html#challenges",
    "title": "Navigating Files and Directories",
    "section": "Challenges",
    "text": "Challenges\n\n\n\n\n\n\nChallenge\n\n\nStarting from /Users/amanda/data, which of the following commands could Amanda use to navigate to her home directory, which is /Users/amanda?\n\ncd .\ncd /\ncd /home/amanda\ncd ../..\ncd ~\ncd home\ncd ~/data/..\ncd\ncd .."
  },
  {
    "objectID": "02-filedir.html#solution-2",
    "href": "02-filedir.html#solution-2",
    "title": "Navigating Files and Directories",
    "section": "Solution",
    "text": "Solution\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\n\nNo: . stands for the current directory.\nNo: / stands for the root directory.\nNo: Amanda‚Äôs home directory is /Users/amanda.\nNo: this command goes up two levels, i.e.¬†ends in /Users.\nYes: ~ stands for the user‚Äôs home directory, in this case /Users/amanda.\nNo: this command would navigate into a directory home in the current directory if it exists.\nYes: unnecessarily complicated, but correct.\nYes: shortcut to go back to the user‚Äôs home directory.\nYes: goes up one level."
  },
  {
    "objectID": "02-filedir.html#solution-4",
    "href": "02-filedir.html#solution-4",
    "title": "Navigating Files and Directories",
    "section": "Solution",
    "text": "Solution\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\n\nNo: there is a directory backup in /Users.\nNo: this is the content of Users/thing/backup, but with .., we asked for one level further up.\nNo: see previous explanation.\nYes: ../backup/ refers to /Users/backup/."
  },
  {
    "objectID": "02-filedir.html#solution-6",
    "href": "02-filedir.html#solution-6",
    "title": "Navigating Files and Directories",
    "section": "Solution",
    "text": "Solution\n\n\nShow Solution\n\n\n\n\n\n\n\nSolution\n\n\n\nNo: pwd is not the name of a directory.\nYes: ls without directory argument lists files and directories in the current directory.\nYes: uses the absolute path explicitly."
  },
  {
    "objectID": "02-filedir.html#general-syntax-of-shell-commands",
    "href": "02-filedir.html#general-syntax-of-shell-commands",
    "title": "Navigating Files and Directories",
    "section": "General Syntax of Shell Commands",
    "text": "General Syntax of Shell Commands\nLet‚Äôs take as example this command:\n$ ls -F /\n\nGeneral syntax of a shell command\nThe space between ls and whatever options you put is important.\nCapitalization is important. ls -s is not the same as ls -S:\n\n$ cd ~/shell-lesson-data\n$ ls -s exercise-data  # size\n$ ls -S exercise-data  # sort by size"
  },
  {
    "objectID": "02-filedir.html#nelles-pipeline-and-tab-completion",
    "href": "02-filedir.html#nelles-pipeline-and-tab-completion",
    "title": "Navigating Files and Directories",
    "section": "Nelle‚Äôs Pipeline and Tab Completion",
    "text": "Nelle‚Äôs Pipeline and Tab Completion\n\nNelle organized the output of the assay machine into north-pacific-gyre/. let‚Äôs go there.\n\n$ cd ~/shell-lesson-data/\n$ cd north-pacific-gyre\n\nNow north-pacific-gyre is a mouthful to write. try instead to type cd n and hit the TAB key.\nhitting TAB twice without any leading character, gives you a list of files in pwd."
  }
]